// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Content = (function(_super) {

      __extends(Content, _super);

      function Content() {
        return Content.__super__.constructor.apply(this, arguments);
      }

      Content.contents = {};

      Content.contentInfos = {};

      Content.prototype.template = function() {
        return DiscussionUtil.getTemplate('_content');
      };

      Content.prototype.actions = {
        editable: '.admin-edit',
        can_reply: '.discussion-reply',
        can_delete: '.admin-delete',
        can_openclose: '.admin-openclose'
      };

      Content.prototype.urlMappers = {};

      Content.prototype.urlFor = function(name) {
        return this.urlMappers[name].apply(this);
      };

      Content.prototype.can = function(action) {
        return (this.get('ability') || {})[action];
      };

      Content.prototype.canBeEndorsed = function() {
        return false;
      };

      Content.prototype.updateInfo = function(info) {
        if (info) {
          this.set('ability', info.ability);
          this.set('voted', info.voted);
          return this.set('subscribed', info.subscribed);
        }
      };

      Content.prototype.addComment = function(comment, options) {
        var comments_count, model, thread;
        options || (options = {});
        if (!options.silent) {
          thread = this.get('thread');
          comments_count = parseInt(thread.get('comments_count'));
          thread.set('comments_count', comments_count + 1);
        }
        this.get('children').push(comment);
        model = new Comment($.extend({}, comment, {
          thread: this.get('thread')
        }));
        this.get('comments').add(model);
        this.trigger("comment:add");
        return model;
      };

      Content.prototype.removeComment = function(comment) {
        var comments_count, thread;
        thread = this.get('thread');
        comments_count = parseInt(thread.get('comments_count'));
        thread.set('comments_count', comments_count - 1 - comment.getCommentsCount());
        return this.trigger("comment:remove");
      };

      Content.prototype.resetComments = function(children) {
        var comment, _i, _len, _ref, _results;
        this.set('children', []);
        this.set('comments', new Comments());
        _ref = children || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          comment = _ref[_i];
          _results.push(this.addComment(comment, {
            silent: true
          }));
        }
        return _results;
      };

      Content.prototype.initialize = function() {
        var userId;
        Content.addContent(this.id, this);
        userId = this.get('user_id');
        if (userId != null) {
          this.set('staff_authored', DiscussionUtil.isStaff(userId));
          this.set('community_ta_authored', DiscussionUtil.isTA(userId));
        } else {
          this.set('staff_authored', false);
          this.set('community_ta_authored', false);
        }
        if (Content.getInfo(this.id)) {
          this.updateInfo(Content.getInfo(this.id));
        }
        this.set('user_url', DiscussionUtil.urlFor('user_profile', userId));
        return this.resetComments(this.get('children'));
      };

      Content.prototype.remove = function() {
        if (this.get('type') === 'comment') {
          this.get('thread').removeComment(this);
          return this.get('thread').trigger("comment:remove", this);
        } else {
          return this.trigger("thread:remove", this);
        }
      };

      Content.addContent = function(id, content) {
        return this.contents[id] = content;
      };

      Content.getContent = function(id) {
        return this.contents[id];
      };

      Content.getInfo = function(id) {
        return this.contentInfos[id];
      };

      Content.loadContentInfos = function(infos) {
        var id, info;
        for (id in infos) {
          info = infos[id];
          if (this.getContent(id)) {
            this.getContent(id).updateInfo(info);
          }
        }
        return $.extend(this.contentInfos, infos);
      };

      Content.prototype.pinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.unPinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.flagAbuse = function() {
        var temp_array;
        temp_array = this.get("abuse_flaggers");
        temp_array.push(window.user.get('id'));
        this.set("abuse_flaggers", temp_array);
        return this.trigger("change", this);
      };

      Content.prototype.unflagAbuse = function() {
        this.get("abuse_flaggers").pop(window.user.get('id'));
        return this.trigger("change", this);
      };

      Content.prototype.isFlagged = function() {
        var flaggers, user, _ref;
        user = DiscussionUtil.getUser();
        flaggers = this.get("abuse_flaggers");
        return user && ((_ref = user.id, __indexOf.call(flaggers, _ref) >= 0) || (DiscussionUtil.isPrivilegedUser(user.id) && flaggers.length > 0));
      };

      Content.prototype.incrementVote = function(increment) {
        var newVotes;
        newVotes = _.clone(this.get("votes"));
        newVotes.up_count = newVotes.up_count + increment;
        return this.set("votes", newVotes);
      };

      Content.prototype.vote = function() {
        return this.incrementVote(1);
      };

      Content.prototype.unvote = function() {
        return this.incrementVote(-1);
      };

      return Content;

    })(Backbone.Model);
    this.Thread = (function(_super) {

      __extends(Thread, _super);

      function Thread() {
        return Thread.__super__.constructor.apply(this, arguments);
      }

      Thread.prototype.urlMappers = {
        'retrieve': function() {
          return DiscussionUtil.urlFor('retrieve_single_thread', this.discussion.id, this.id);
        },
        'reply': function() {
          return DiscussionUtil.urlFor('create_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'close': function() {
          return DiscussionUtil.urlFor('openclose_thread', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_thread', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_thread', this.id);
        },
        'follow': function() {
          return DiscussionUtil.urlFor('follow_thread', this.id);
        },
        'unfollow': function() {
          return DiscussionUtil.urlFor('unfollow_thread', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        },
        'pinThread': function() {
          return DiscussionUtil.urlFor("pin_thread", this.id);
        },
        'unPinThread': function() {
          return DiscussionUtil.urlFor("un_pin_thread", this.id);
        }
      };

      Thread.prototype.initialize = function() {
        this.set('thread', this);
        return Thread.__super__.initialize.call(this);
      };

      Thread.prototype.comment = function() {
        return this.set("comments_count", parseInt(this.get("comments_count")) + 1);
      };

      Thread.prototype.follow = function() {
        return this.set('subscribed', true);
      };

      Thread.prototype.unfollow = function() {
        return this.set('subscribed', false);
      };

      Thread.prototype.display_body = function() {
        if (this.has("highlighted_body")) {
          return String(this.get("highlighted_body")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("body");
        }
      };

      Thread.prototype.display_title = function() {
        if (this.has("highlighted_title")) {
          return String(this.get("highlighted_title")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("title");
        }
      };

      Thread.prototype.toJSON = function() {
        var json_attributes;
        json_attributes = _.clone(this.attributes);
        return _.extend(json_attributes, {
          title: this.display_title(),
          body: this.display_body()
        });
      };

      Thread.prototype.created_at_date = function() {
        return new Date(this.get("created_at"));
      };

      Thread.prototype.created_at_time = function() {
        return new Date(this.get("created_at")).getTime();
      };

      Thread.prototype.hasResponses = function() {
        return this.get('comments_count') > 0;
      };

      return Thread;

    })(this.Content);
    this.Comment = (function(_super) {

      __extends(Comment, _super);

      function Comment() {
        var _this = this;
        this.canBeEndorsed = function() {
          return Comment.prototype.canBeEndorsed.apply(_this, arguments);
        };
        return Comment.__super__.constructor.apply(this, arguments);
      }

      Comment.prototype.urlMappers = {
        'reply': function() {
          return DiscussionUtil.urlFor('create_sub_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'endorse': function() {
          return DiscussionUtil.urlFor('endorse_comment', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_comment', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_comment', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        }
      };

      Comment.prototype.getCommentsCount = function() {
        var count;
        count = 0;
        this.get('comments').each(function(comment) {
          return count += comment.getCommentsCount() + 1;
        });
        return count;
      };

      Comment.prototype.canBeEndorsed = function() {
        var user_id;
        user_id = window.user.get("id");
        return user_id && (DiscussionUtil.isPrivilegedUser(user_id) || (this.get('thread').get('thread_type') === 'question' && this.get('thread').get('user_id') === user_id));
      };

      return Comment;

    })(this.Content);
    this.Comments = (function(_super) {

      __extends(Comments, _super);

      function Comments() {
        return Comments.__super__.constructor.apply(this, arguments);
      }

      Comments.prototype.model = Comment;

      Comments.prototype.initialize = function() {
        var _this = this;
        return this.bind("add", function(item) {
          return item.collection = _this;
        });
      };

      Comments.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      return Comments;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Discussion = (function(_super) {

      __extends(Discussion, _super);

      function Discussion() {
        return Discussion.__super__.constructor.apply(this, arguments);
      }

      Discussion.prototype.model = Thread;

      Discussion.prototype.initialize = function(models, options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        this.pages = options['pages'] || 1;
        this.current_page = 1;
        this.sort_preference = options['sort'];
        this.bind("add", function(item) {
          return item.discussion = _this;
        });
        this.setSortComparator(this.sort_preference);
        return this.on("thread:remove", function(thread) {
          return _this.remove(thread);
        });
      };

      Discussion.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      Discussion.prototype.hasMorePages = function() {
        return this.current_page < this.pages;
      };

      Discussion.prototype.setSortComparator = function(sortBy) {
        switch (sortBy) {
          case 'date':
            return this.comparator = this.sortByDateRecentFirst;
          case 'votes':
            return this.comparator = this.sortByVotes;
          case 'comments':
            return this.comparator = this.sortByComments;
        }
      };

      Discussion.prototype.addThread = function(thread, options) {
        var model;
        if (!this.find(thread.id)) {
          options || (options = {});
          model = new Thread(thread);
          this.add(model);
          return model;
        }
      };

      Discussion.prototype.retrieveAnotherPage = function(mode, options, sort_options, error) {
        var data, url,
          _this = this;
        if (options == null) {
          options = {};
        }
        if (sort_options == null) {
          sort_options = {};
        }
        if (error == null) {
          error = null;
        }
        data = {
          page: this.current_page + 1
        };
        if (_.contains(["unread", "unanswered", "flagged"], options.filter)) {
          data[options.filter] = true;
        }
        switch (mode) {
          case 'search':
            url = DiscussionUtil.urlFor('search');
            data['text'] = options.search_text;
            break;
          case 'commentables':
            url = DiscussionUtil.urlFor('search');
            data['commentable_ids'] = options.commentable_ids;
            break;
          case 'all':
            url = DiscussionUtil.urlFor('threads');
            break;
          case 'followed':
            url = DiscussionUtil.urlFor('followed_threads', options.user_id);
        }
        if (options['group_id']) {
          data['group_id'] = options['group_id'];
        }
        data['sort_key'] = sort_options.sort_key || 'date';
        data['sort_order'] = sort_options.sort_order || 'desc';
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          url: url,
          data: data,
          dataType: 'json',
          success: function(response, textStatus) {
            var models, new_collection, new_threads;
            models = _this.models;
            new_threads = [
              (function() {
                var _i, _len, _ref, _results;
                _ref = response.discussion_data;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  data = _ref[_i];
                  _results.push(new Thread(data));
                }
                return _results;
              })()
            ][0];
            new_collection = _.union(models, new_threads);
            Content.loadContentInfos(response.annotated_content_info);
            _this.pages = response.num_pages;
            _this.current_page = response.page;
            return _this.reset(new_collection);
          },
          error: error
        });
      };

      Discussion.prototype.sortByDate = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return new Date(today.getTime() + (24 * 60 * 60 * 1000));
        } else {
          return thread.get("created_at");
        }
      };

      Discussion.prototype.sortByDateRecentFirst = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return -(new Date(today.getTime() + (24 * 60 * 60 * 1000)));
        } else {
          return -(new Date(thread.get("created_at")).getTime());
        }
      };

      Discussion.prototype.sortByVotes = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("votes")['up_count']);
        thread2_count = parseInt(thread2.get("votes")['up_count']);
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      Discussion.prototype.sortByComments = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("comments_count"));
        thread2_count = parseInt(thread2.get("comments_count"));
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      return Discussion;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {

  this.DiscussionFilter = (function() {

    function DiscussionFilter() {}

    DiscussionFilter.filterDrop = function(e) {
      var $drop, $items, query;
      $drop = $(e.target).parents('.topic-menu-wrapper');
      query = $(e.target).val();
      $items = $drop.find('.topic-menu-item');
      if (query.length === 0) {
        $items.removeClass('hidden');
        return;
      }
      $items.addClass('hidden');
      return $items.each(function(i) {
        var path, pathText, pathTitles;
        path = $(this).parents(".topic-menu-item").andSelf();
        pathTitles = path.children(".topic-title").map(function(i, elem) {
          return $(elem).text();
        }).get();
        pathText = pathTitles.join(" / ").toLowerCase();
        if (query.split(" ").every(function(term) {
          return pathText.search(term.toLowerCase()) !== -1;
        })) {
          $(this).removeClass('hidden');
          $(this).find('.topic-menu-item').removeClass('hidden');
          return $(this).parents('.topic-menu-item').removeClass('hidden');
        }
      });
    };

    return DiscussionFilter;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionModuleView = (function(_super) {

      __extends(DiscussionModuleView, _super);

      function DiscussionModuleView() {
        var _this = this;
        this.navigateToPage = function(event) {
          return DiscussionModuleView.prototype.navigateToPage.apply(_this, arguments);
        };
        this.renderPagination = function(numPages) {
          return DiscussionModuleView.prototype.renderPagination.apply(_this, arguments);
        };
        this.addThread = function(thread, collection, options) {
          return DiscussionModuleView.prototype.addThread.apply(_this, arguments);
        };
        this.renderDiscussion = function($elem, response, textStatus, discussionId) {
          return DiscussionModuleView.prototype.renderDiscussion.apply(_this, arguments);
        };
        this.loadPage = function($elem, error) {
          return DiscussionModuleView.prototype.loadPage.apply(_this, arguments);
        };
        this.toggleDiscussion = function(event) {
          return DiscussionModuleView.prototype.toggleDiscussion.apply(_this, arguments);
        };
        this.hideDiscussion = function() {
          return DiscussionModuleView.prototype.hideDiscussion.apply(_this, arguments);
        };
        this.hideNewPost = function() {
          return DiscussionModuleView.prototype.hideNewPost.apply(_this, arguments);
        };
        this.toggleNewPost = function(event) {
          return DiscussionModuleView.prototype.toggleNewPost.apply(_this, arguments);
        };
        return DiscussionModuleView.__super__.constructor.apply(this, arguments);
      }

      DiscussionModuleView.prototype.events = {
        "click .discussion-show": "toggleDiscussion",
        "keydown .discussion-show": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleDiscussion);
        },
        "click .new-post-btn": "toggleNewPost",
        "keydown .new-post-btn": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleNewPost);
        },
        "click .discussion-paginator a": "navigateToPage"
      };

      DiscussionModuleView.prototype.paginationTemplate = function() {
        return DiscussionUtil.getTemplate("_pagination");
      };

      DiscussionModuleView.prototype.page_re = /\?discussion_page=(\d+)/;

      DiscussionModuleView.prototype.initialize = function() {
        var match;
        this.toggleDiscussionBtn = this.$(".discussion-show");
        match = this.page_re.exec(window.location.href);
        if (match) {
          return this.page = parseInt(match[1]);
        } else {
          return this.page = 1;
        }
      };

      DiscussionModuleView.prototype.toggleNewPost = function(event) {
        event.preventDefault();
        if (!this.newPostForm) {
          this.toggleDiscussion();
          this.isWaitingOnNewPost = true;
          return;
        }
        if (this.showed) {
          this.newPostForm.slideDown(300);
        } else {
          this.newPostForm.show();
        }
        this.toggleDiscussionBtn.addClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html(gettext("Hide Discussion"));
        this.$("section.discussion").slideDown();
        return this.showed = true;
      };

      DiscussionModuleView.prototype.hideNewPost = function() {
        return this.newPostForm.slideUp(300);
      };

      DiscussionModuleView.prototype.hideDiscussion = function() {
        this.$("section.discussion").slideUp();
        this.toggleDiscussionBtn.removeClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html(gettext("Show Discussion"));
        return this.showed = false;
      };

      DiscussionModuleView.prototype.toggleDiscussion = function(event) {
        var $elem,
          _this = this;
        if (this.showed) {
          return this.hideDiscussion();
        } else {
          this.toggleDiscussionBtn.addClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html(gettext("Hide Discussion"));
          if (this.retrieved) {
            this.$("section.discussion").slideDown();
            return this.showed = true;
          } else {
            $elem = this.toggleDiscussionBtn;
            return this.loadPage($elem, function() {
              _this.hideDiscussion();
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the discussion. Please try again."));
            });
          }
        }
      };

      DiscussionModuleView.prototype.loadPage = function($elem, error) {
        var discussionId, url,
          _this = this;
        discussionId = this.$el.data("discussion-id");
        url = DiscussionUtil.urlFor('retrieve_discussion', discussionId) + ("?page=" + this.page);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          $loading: $elem,
          takeFocus: true,
          url: url,
          type: "GET",
          dataType: 'json',
          success: function(response, textStatus, jqXHR) {
            return _this.renderDiscussion($elem, response, textStatus, discussionId);
          },
          error: error
        });
      };

      DiscussionModuleView.prototype.renderDiscussion = function($elem, response, textStatus, discussionId) {
        var $discussion, user;
        $elem.focus();
        user = new DiscussionUser(response.user_info);
        window.user = user;
        DiscussionUtil.setUser(user);
        Content.loadContentInfos(response.annotated_content_info);
        DiscussionUtil.loadRoles(response.roles);
        this.course_settings = new DiscussionCourseSettings(response.course_settings);
        this.discussion = new Discussion();
        this.discussion.reset(response.discussion_data, {
          silent: false
        });
        $discussion = $(Mustache.render($("script#_inline_discussion").html(), {
          'threads': response.discussion_data,
          'discussionId': discussionId
        }));
        if (this.$('section.discussion').length) {
          this.$('section.discussion').replaceWith($discussion);
        } else {
          this.$el.append($discussion);
        }
        this.newPostForm = $('.new-post-article');
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadView({
            el: this.$("article#thread_" + thread.id),
            model: thread,
            mode: "inline"
          });
        });
        _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
        DiscussionUtil.bulkUpdateContentInfo(window.$$annotated_content_info);
        this.newPostView = new NewPostView({
          el: this.newPostForm,
          collection: this.discussion,
          course_settings: this.course_settings,
          topicId: discussionId
        });
        this.newPostView.render();
        this.listenTo(this.newPostView, 'newPost:cancel', this.hideNewPost);
        this.discussion.on("add", this.addThread);
        this.retrieved = true;
        this.showed = true;
        this.renderPagination(response.num_pages);
        if (this.isWaitingOnNewPost) {
          return this.newPostForm.show();
        }
      };

      DiscussionModuleView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadView({
          el: article,
          model: thread,
          mode: "inline"
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      DiscussionModuleView.prototype.renderPagination = function(numPages) {
        var pageUrl, params, thing;
        pageUrl = function(number) {
          return "?discussion_page=" + number;
        };
        params = DiscussionUtil.getPaginationParams(this.page, numPages, pageUrl);
        thing = Mustache.render(this.paginationTemplate(), params);
        return this.$('section.pagination').html(thing);
      };

      DiscussionModuleView.prototype.navigateToPage = function(event) {
        var currPage,
          _this = this;
        event.preventDefault();
        window.history.pushState({}, window.document.title, event.target.href);
        currPage = this.page;
        this.page = $(event.target).data('page-number');
        return this.loadPage($(event.target), function() {
          _this.page = currPage;
          return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the threads you requested. Please try again."));
        });
      };

      return DiscussionModuleView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionRouter = (function(_super) {

      __extends(DiscussionRouter, _super);

      function DiscussionRouter() {
        var _this = this;
        this.hideNewPost = function() {
          return DiscussionRouter.prototype.hideNewPost.apply(_this, arguments);
        };
        this.showNewPost = function(event) {
          return DiscussionRouter.prototype.showNewPost.apply(_this, arguments);
        };
        this.navigateToAllThreads = function() {
          return DiscussionRouter.prototype.navigateToAllThreads.apply(_this, arguments);
        };
        this.navigateToThread = function(thread_id) {
          return DiscussionRouter.prototype.navigateToThread.apply(_this, arguments);
        };
        this.setActiveThread = function() {
          return DiscussionRouter.prototype.setActiveThread.apply(_this, arguments);
        };
        return DiscussionRouter.__super__.constructor.apply(this, arguments);
      }

      DiscussionRouter.prototype.routes = {
        "": "allThreads",
        ":forum_name/threads/:thread_id": "showThread"
      };

      DiscussionRouter.prototype.initialize = function(options) {
        var _this = this;
        this.discussion = options['discussion'];
        this.course_settings = options['course_settings'];
        this.nav = new DiscussionThreadListView({
          collection: this.discussion,
          el: $(".forum-nav"),
          courseSettings: this.course_settings
        });
        this.nav.on("thread:selected", this.navigateToThread);
        this.nav.on("thread:removed", this.navigateToAllThreads);
        this.nav.on("threads:rendered", this.setActiveThread);
        this.nav.on("thread:created", this.navigateToThread);
        this.nav.render();
        this.newPost = $('.new-post-article');
        this.newPostView = new NewPostView({
          el: this.newPost,
          collection: this.discussion,
          course_settings: this.course_settings,
          mode: "tab"
        });
        this.newPostView.render();
        this.listenTo(this.newPostView, 'newPost:cancel', this.hideNewPost);
        $('.new-post-btn').bind("click", this.showNewPost);
        return $('.new-post-btn').bind("keydown", function(event) {
          return DiscussionUtil.activateOnSpace(event, _this.showNewPost);
        });
      };

      DiscussionRouter.prototype.allThreads = function() {
        this.nav.updateSidebar();
        return this.nav.goHome();
      };

      DiscussionRouter.prototype.setActiveThread = function() {
        if (this.thread) {
          return this.nav.setActiveThread(this.thread.get("id"));
        } else {
          return this.nav.goHome;
        }
      };

      DiscussionRouter.prototype.showThread = function(forum_name, thread_id) {
        var _this = this;
        this.thread = this.discussion.get(thread_id);
        this.thread.set("unread_comments_count", 0);
        this.thread.set("read", true);
        this.setActiveThread();
        if (this.main) {
          this.main.cleanup();
          this.main.undelegateEvents();
        }
        if (!($(".forum-content").is(":visible"))) {
          $(".forum-content").fadeIn();
        }
        if (this.newPost.is(":visible")) {
          this.newPost.fadeOut();
        }
        this.main = new DiscussionThreadView({
          el: $(".forum-content"),
          model: this.thread,
          mode: "tab"
        });
        this.main.render();
        return this.main.on("thread:responses:rendered", function() {
          return _this.nav.updateSidebar();
        });
      };

      DiscussionRouter.prototype.navigateToThread = function(thread_id) {
        var thread;
        thread = this.discussion.get(thread_id);
        return this.navigate("" + (thread.get("commentable_id")) + "/threads/" + thread_id, {
          trigger: true
        });
      };

      DiscussionRouter.prototype.navigateToAllThreads = function() {
        return this.navigate("", {
          trigger: true
        });
      };

      DiscussionRouter.prototype.showNewPost = function(event) {
        var _this = this;
        return $('.forum-content').fadeOut({
          duration: 200,
          complete: function() {
            _this.newPost.fadeIn(200);
            return $('.new-post-title').focus();
          }
        });
      };

      DiscussionRouter.prototype.hideNewPost = function() {
        var _this = this;
        return this.newPost.fadeOut({
          duration: 200,
          complete: function() {
            return $('.forum-content').fadeIn(200);
          }
        });
      };

      return DiscussionRouter;

    })(Backbone.Router);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var DiscussionApp, DiscussionProfileApp;

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    DiscussionApp = {
      start: function(elem) {
        var content_info, course_settings, discussion, element, sort_preference, thread_pages, threads, user, user_info;
        DiscussionUtil.loadRolesFromContainer();
        element = $(elem);
        window.$$course_id = element.data("course-id");
        user_info = element.data("user-info");
        sort_preference = element.data("sort-preference");
        threads = element.data("threads");
        thread_pages = element.data("thread-pages");
        content_info = element.data("content-info");
        user = new DiscussionUser(user_info);
        DiscussionUtil.setUser(user);
        window.user = user;
        Content.loadContentInfos(content_info);
        discussion = new Discussion(threads, {
          pages: thread_pages,
          sort: sort_preference
        });
        course_settings = new DiscussionCourseSettings(element.data("course-settings"));
        new DiscussionRouter({
          discussion: discussion,
          course_settings: course_settings
        });
        return Backbone.history.start({
          pushState: true,
          root: "/courses/" + $$course_id + "/discussion/forum/"
        });
      }
    };
    DiscussionProfileApp = {
      start: function(elem) {
        var element, numPages, page, threads, user_info;
        DiscussionUtil.loadRoles({
          "Moderator": [],
          "Administrator": [],
          "Community TA": []
        });
        element = $(elem);
        window.$$course_id = element.data("course-id");
        threads = element.data("threads");
        user_info = element.data("user-info");
        window.user = new DiscussionUser(user_info);
        page = element.data("page");
        numPages = element.data("num-pages");
        return new DiscussionUserProfileView({
          el: element,
          collection: threads,
          page: page,
          numPages: numPages
        });
      }
    };
    $(function() {
      $("section.discussion").each(function(index, elem) {
        return DiscussionApp.start(elem);
      });
      return $("section.discussion-user-threads").each(function(index, elem) {
        return DiscussionProfileApp.start(elem);
      });
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionCourseSettings = (function(_super) {

      __extends(DiscussionCourseSettings, _super);

      function DiscussionCourseSettings() {
        return DiscussionCourseSettings.__super__.constructor.apply(this, arguments);
      }

      return DiscussionCourseSettings;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUser = (function(_super) {

      __extends(DiscussionUser, _super);

      function DiscussionUser() {
        return DiscussionUser.__super__.constructor.apply(this, arguments);
      }

      DiscussionUser.prototype.following = function(thread) {
        return _.include(this.get('subscribed_thread_ids'), thread.id);
      };

      DiscussionUser.prototype.voted = function(thread) {
        return _.include(this.get('upvoted_ids'), thread.id);
      };

      DiscussionUser.prototype.vote = function(thread) {
        this.get('upvoted_ids').push(thread.id);
        return thread.vote();
      };

      DiscussionUser.prototype.unvote = function(thread) {
        this.set('upvoted_ids', _.without(this.get('upvoted_ids'), thread.id));
        return thread.unvote();
      };

      return DiscussionUser;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {



}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {

  $(function() {
    if (!window.$$contents) {
      window.$$contents = {};
    }
    return $.fn.extend({
      loading: function(takeFocus) {
        this.$_loading = $("<div class='loading-animation' tabindex='0'><span class='sr'>" + gettext("Loading content") + "</span></div>");
        $(this).after(this.$_loading);
        if (takeFocus) {
          DiscussionUtil.makeFocusTrap(this.$_loading);
          return this.$_loading.focus();
        }
      },
      loaded: function() {
        return this.$_loading.remove();
      }
    });
  });

  this.DiscussionUtil = (function() {

    function DiscussionUtil() {}

    DiscussionUtil.wmdEditors = {};

    DiscussionUtil.getTemplate = function(id) {
      return $("script#" + id).html();
    };

    DiscussionUtil.setUser = function(user) {
      return this.user = user;
    };

    DiscussionUtil.getUser = function() {
      return this.user;
    };

    DiscussionUtil.loadRoles = function(roles) {
      return this.roleIds = roles;
    };

    DiscussionUtil.loadRolesFromContainer = function() {
      return this.loadRoles($("#discussion-container").data("roles"));
    };

    DiscussionUtil.isStaff = function(user_id) {
      var staff, _ref;
      if (user_id == null) {
        user_id = (_ref = this.user) != null ? _ref.id : void 0;
      }
      staff = _.union(this.roleIds['Moderator'], this.roleIds['Administrator']);
      return _.include(staff, parseInt(user_id));
    };

    DiscussionUtil.isTA = function(user_id) {
      var ta, _ref;
      if (user_id == null) {
        user_id = (_ref = this.user) != null ? _ref.id : void 0;
      }
      ta = _.union(this.roleIds['Community TA']);
      return _.include(ta, parseInt(user_id));
    };

    DiscussionUtil.isPrivilegedUser = function(user_id) {
      return this.isStaff(user_id) || this.isTA(user_id);
    };

    DiscussionUtil.bulkUpdateContentInfo = function(infos) {
      var id, info, _results;
      _results = [];
      for (id in infos) {
        info = infos[id];
        _results.push(Content.getContent(id).updateInfo(info));
      }
      return _results;
    };

    DiscussionUtil.generateDiscussionLink = function(cls, txt, handler) {
      return $("<a>").addClass("discussion-link").attr("href", "javascript:void(0)").addClass(cls).html(txt).click(function() {
        return handler(this);
      });
    };

    DiscussionUtil.urlFor = function(name, param, param1, param2) {
      return {
        follow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/follow",
        unfollow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/unfollow",
        create_thread: "/courses/" + $$course_id + "/discussion/" + param + "/threads/create",
        update_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/update",
        create_comment: "/courses/" + $$course_id + "/discussion/threads/" + param + "/reply",
        delete_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/delete",
        flagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/flagAbuse",
        unFlagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unFlagAbuse",
        flagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/flagAbuse",
        unFlagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unFlagAbuse",
        upvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/upvote",
        downvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/downvote",
        pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/pin",
        un_pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unpin",
        undo_vote_for_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unvote",
        follow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/follow",
        unfollow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unfollow",
        update_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/update",
        endorse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/endorse",
        create_sub_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/reply",
        delete_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/delete",
        upvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/upvote",
        downvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/downvote",
        undo_vote_for_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unvote",
        upload: "/courses/" + $$course_id + "/discussion/upload",
        users: "/courses/" + $$course_id + "/discussion/users",
        search: "/courses/" + $$course_id + "/discussion/forum/search",
        retrieve_discussion: "/courses/" + $$course_id + "/discussion/forum/" + param + "/inline",
        retrieve_single_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        openclose_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/close",
        permanent_link_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        permanent_link_comment: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1 + "#" + param2,
        user_profile: "/courses/" + $$course_id + "/discussion/forum/users/" + param,
        followed_threads: "/courses/" + $$course_id + "/discussion/forum/users/" + param + "/followed",
        threads: "/courses/" + $$course_id + "/discussion/forum",
        "enable_notifications": "/notification_prefs/enable/",
        "disable_notifications": "/notification_prefs/disable/",
        "notifications_status": "/notification_prefs/status/"
      }[name];
    };

    DiscussionUtil.ignoreEnterKey = function(event) {
      if (event.which === 13) {
        return event.preventDefault();
      }
    };

    DiscussionUtil.activateOnSpace = function(event, func) {
      if (event.which === 32) {
        event.preventDefault();
        return func(event);
      }
    };

    DiscussionUtil.makeFocusTrap = function(elem) {
      return elem.keydown(function(event) {
        if (event.which === 9) {
          return event.preventDefault();
        }
      });
    };

    DiscussionUtil.discussionAlert = function(header, body) {
      var alertDiv, alertTrigger;
      if ($("#discussion-alert").length === 0) {
        alertDiv = $("<div class='modal' role='alertdialog' id='discussion-alert' aria-describedby='discussion-alert-message'/>").css("display", "none");
        alertDiv.html("<div class='inner-wrapper discussion-alert-wrapper'>" + "  <button class='close-modal dismiss' aria-hidden='true'><i class='icon-remove'></i></button>" + "  <header><h2/><hr/></header>" + "  <p id='discussion-alert-message'/>" + "  <hr/>" + "  <button class='dismiss'>" + gettext("OK") + "</button>" + "</div>");
        this.makeFocusTrap(alertDiv.find("button"));
        alertTrigger = $("<a href='#discussion-alert' id='discussion-alert-trigger'/>").css("display", "none");
        alertTrigger.leanModal({
          closeButton: "#discussion-alert .dismiss",
          overlay: 1,
          top: 200
        });
        $("body").append(alertDiv).append(alertTrigger);
      }
      $("#discussion-alert header h2").html(header);
      $("#discussion-alert p").html(body);
      $("#discussion-alert-trigger").click();
      return $("#discussion-alert button").focus();
    };

    DiscussionUtil.safeAjax = function(params) {
      var $elem, request,
        _this = this;
      $elem = params.$elem;
      if ($elem && $elem.attr("disabled")) {
        return;
      }
      params["url"] = URI(params["url"]).addSearch({
        ajax: 1
      });
      params["beforeSend"] = function() {
        if ($elem) {
          $elem.attr("disabled", "disabled");
        }
        if (params["$loading"]) {
          if (params["loadingCallback"] != null) {
            return params["loadingCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loading(params["takeFocus"]);
          }
        }
      };
      if (!params["error"]) {
        params["error"] = function() {
          return _this.discussionAlert(gettext("Sorry"), gettext("We had some trouble processing your request. Please ensure you have copied any unsaved work and then reload the page."));
        };
      }
      request = $.ajax(params).always(function() {
        if ($elem) {
          $elem.removeAttr("disabled");
        }
        if (params["$loading"]) {
          if (params["loadedCallback"] != null) {
            return params["loadedCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loaded();
          }
        }
      });
      return request;
    };

    DiscussionUtil.updateWithUndo = function(model, updates, safeAjaxParams, errorMsg) {
      var undo,
        _this = this;
      if (errorMsg) {
        safeAjaxParams.error = function() {
          return _this.discussionAlert(gettext("Sorry"), errorMsg);
        };
      }
      undo = _.pick(model.attributes, _.keys(updates));
      model.set(updates);
      return this.safeAjax(safeAjaxParams).fail(function() {
        return model.set(undo);
      });
    };

    DiscussionUtil.bindLocalEvents = function($local, eventsHandler) {
      var event, eventSelector, handler, selector, _ref, _results;
      _results = [];
      for (eventSelector in eventsHandler) {
        handler = eventsHandler[eventSelector];
        _ref = eventSelector.split(' '), event = _ref[0], selector = _ref[1];
        _results.push($local(selector).unbind(event)[event](handler));
      }
      return _results;
    };

    DiscussionUtil.formErrorHandler = function(errorsField) {
      return function(xhr, textStatus, error) {
        var makeErrorElem, response, _i, _len, _ref, _results;
        makeErrorElem = function(message) {
          return $("<li>").addClass("post-error").html(message);
        };
        errorsField.empty().show();
        if (xhr.status === 400) {
          response = JSON.parse(xhr.responseText);
          if ((response.errors != null) && response.errors.length > 0) {
            _ref = response.errors;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              error = _ref[_i];
              _results.push(errorsField.append(makeErrorElem(error)));
            }
            return _results;
          }
        } else {
          return errorsField.append(makeErrorElem(gettext("We had some trouble processing your request. Please try again.")));
        }
      };
    };

    DiscussionUtil.clearFormErrors = function(errorsField) {
      return errorsField.empty();
    };

    DiscussionUtil.postMathJaxProcessor = function(text) {
      var RE_DISPLAYMATH, RE_INLINEMATH;
      RE_INLINEMATH = /^\$([^\$]*)\$/g;
      RE_DISPLAYMATH = /^\$\$([^\$]*)\$\$/g;
      return this.processEachMathAndCode(text, function(s, type) {
        if (type === 'display') {
          return s.replace(RE_DISPLAYMATH, function($0, $1) {
            return "\\[" + $1 + "\\]";
          });
        } else if (type === 'inline') {
          return s.replace(RE_INLINEMATH, function($0, $1) {
            return "\\(" + $1 + "\\)";
          });
        } else {
          return s;
        }
      });
    };

    DiscussionUtil.makeWmdEditor = function($content, $local, cls_identifier) {
      var appended_id, editor, elem, id, imageUploadUrl, placeholder, _processor;
      elem = $local("." + cls_identifier);
      placeholder = elem.data('placeholder');
      id = elem.attr("data-id");
      appended_id = "-" + cls_identifier + "-" + id;
      imageUploadUrl = this.urlFor('upload');
      _processor = function(_this) {
        return function(text) {
          return _this.postMathJaxProcessor(text);
        };
      };
      editor = Markdown.makeWmdEditor(elem, appended_id, imageUploadUrl, _processor(this));
      this.wmdEditors["" + cls_identifier + "-" + id] = editor;
      if (placeholder != null) {
        elem.find("#wmd-input" + appended_id).attr('placeholder', placeholder);
      }
      return editor;
    };

    DiscussionUtil.getWmdEditor = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return this.wmdEditors["" + cls_identifier + "-" + id];
    };

    DiscussionUtil.getWmdInput = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return $local("#wmd-input-" + cls_identifier + "-" + id);
    };

    DiscussionUtil.getWmdContent = function($content, $local, cls_identifier) {
      return this.getWmdInput($content, $local, cls_identifier).val();
    };

    DiscussionUtil.setWmdContent = function($content, $local, cls_identifier, text) {
      this.getWmdInput($content, $local, cls_identifier).val(text);
      return this.getWmdEditor($content, $local, cls_identifier).refreshPreview();
    };

    DiscussionUtil.processEachMathAndCode = function(text, processor) {
      var $div, ESCAPED_BACKSLASH, ESCAPED_DOLLAR, RE_DISPLAYMATH, RE_INLINEMATH, cnt, codeArchive, processedText;
      codeArchive = [];
      RE_DISPLAYMATH = /^([^\$]*?)\$\$([^\$]*?)\$\$(.*)$/m;
      RE_INLINEMATH = /^([^\$]*?)\$([^\$]+?)\$(.*)$/m;
      ESCAPED_DOLLAR = '@@ESCAPED_D@@';
      ESCAPED_BACKSLASH = '@@ESCAPED_B@@';
      processedText = "";
      $div = $("<div>").html(text);
      $div.find("code").each(function(index, code) {
        codeArchive.push($(code).html());
        return $(code).html(codeArchive.length - 1);
      });
      text = $div.html();
      text = text.replace(/\\\$/g, ESCAPED_DOLLAR);
      while (true) {
        if (RE_INLINEMATH.test(text)) {
          text = text.replace(RE_INLINEMATH, function($0, $1, $2, $3) {
            processedText += $1 + processor("$" + $2 + "$", 'inline');
            return $3;
          });
        } else if (RE_DISPLAYMATH.test(text)) {
          text = text.replace(RE_DISPLAYMATH, function($0, $1, $2, $3) {
            processedText = processor("$$" + $2 + "$$", 'display') + processedText;
            processedText = $1 + processedText;
            return $3;
          });
        } else {
          processedText += text;
          break;
        }
      }
      text = processedText;
      text = text.replace(new RegExp(ESCAPED_DOLLAR, 'g'), '\\$');
      text = text.replace(/\\\\\\\\/g, ESCAPED_BACKSLASH);
      text = text.replace(/\\begin\{([a-z]*\*?)\}([\s\S]*?)\\end\{\1\}/img, function($0, $1, $2) {
        return processor(("\\begin{" + $1 + "}") + $2 + ("\\end{" + $1 + "}"));
      });
      text = text.replace(new RegExp(ESCAPED_BACKSLASH, 'g'), '\\\\\\\\');
      $div = $("<div>").html(text);
      cnt = 0;
      $div.find("code").each(function(index, code) {
        $(code).html(processor(codeArchive[cnt], 'code'));
        return cnt += 1;
      });
      text = $div.html();
      return text;
    };

    DiscussionUtil.unescapeHighlightTag = function(text) {
      return text.replace(/\&lt\;highlight\&gt\;/g, "<span class='search-highlight'>").replace(/\&lt\;\/highlight\&gt\;/g, "</span>");
    };

    DiscussionUtil.stripHighlight = function(text) {
      return text.replace(/\&(amp\;)?lt\;highlight\&(amp\;)?gt\;/g, "").replace(/\&(amp\;)?lt\;\/highlight\&(amp\;)?gt\;/g, "");
    };

    DiscussionUtil.stripLatexHighlight = function(text) {
      return this.processEachMathAndCode(text, this.stripHighlight);
    };

    DiscussionUtil.markdownWithHighlight = function(text) {
      var converter;
      text = text.replace(/^\&gt\;/gm, ">");
      converter = Markdown.getMathCompatibleConverter();
      text = this.unescapeHighlightTag(this.stripLatexHighlight(converter.makeHtml(text)));
      return text.replace(/^>/gm, "&gt;");
    };

    DiscussionUtil.abbreviateString = function(text, minLength) {
      if (text.length < minLength) {
        return text;
      } else {
        while (minLength < text.length && text[minLength] !== ' ') {
          minLength++;
        }
        return text.substr(0, minLength) + gettext('…');
      }
    };

    DiscussionUtil.abbreviateHTML = function(html, minLength) {
      var $result, imagesToReplace, truncated_text;
      truncated_text = jQuery.truncate(html, {
        length: minLength,
        noBreaks: true,
        ellipsis: gettext('…')
      });
      $result = $("<div>" + truncated_text + "</div>");
      imagesToReplace = $result.find("img:not(:first)");
      if (imagesToReplace.length > 0) {
        $result.append("<p><em>Some images in this post have been omitted</em></p>");
      }
      imagesToReplace.replaceWith("<em>image omitted</em>");
      return $result.html();
    };

    DiscussionUtil.getPaginationParams = function(curPage, numPages, pageUrlFunc) {
      var delta, maxPage, minPage, pageInfo, params;
      delta = 2;
      minPage = Math.max(curPage - delta, 1);
      maxPage = Math.min(curPage + delta, numPages);
      pageInfo = function(pageNum) {
        return {
          number: pageNum,
          url: pageUrlFunc(pageNum)
        };
      };
      return params = {
        page: curPage,
        lowPages: _.range(minPage, curPage).map(pageInfo),
        highPages: _.range(curPage + 1, maxPage + 1).map(pageInfo),
        previous: curPage > 1 ? pageInfo(curPage - 1) : null,
        next: curPage < numPages ? pageInfo(curPage + 1) : null,
        leftdots: minPage > 2,
        rightdots: maxPage < numPages - 1,
        first: minPage > 1 ? pageInfo(1) : null,
        last: maxPage < numPages ? pageInfo(numPages) : null
      };
    };

    return DiscussionUtil;

  }).call(this);

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionContentView = (function(_super) {

      __extends(DiscussionContentView, _super);

      function DiscussionContentView() {
        var _this = this;
        this.setWmdContent = function(cls_identifier, text) {
          return DiscussionContentView.prototype.setWmdContent.apply(_this, arguments);
        };
        this.getWmdContent = function(cls_identifier) {
          return DiscussionContentView.prototype.getWmdContent.apply(_this, arguments);
        };
        this.getWmdEditor = function(cls_identifier) {
          return DiscussionContentView.prototype.getWmdEditor.apply(_this, arguments);
        };
        this.makeWmdEditor = function(cls_identifier) {
          return DiscussionContentView.prototype.makeWmdEditor.apply(_this, arguments);
        };
        return DiscussionContentView.__super__.constructor.apply(this, arguments);
      }

      DiscussionContentView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "keydown .discussion-flag-abuse": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFlagAbuse);
        }
      };

      DiscussionContentView.prototype.attrRenderer = {
        ability: function(ability) {
          var action, selector, _ref, _results;
          _ref = this.abilityRenderer;
          _results = [];
          for (action in _ref) {
            selector = _ref[action];
            if (!ability[action]) {
              _results.push(selector.disable.apply(this));
            } else {
              _results.push(selector.enable.apply(this));
            }
          }
          return _results;
        }
      };

      DiscussionContentView.prototype.abilityRenderer = {
        editable: {
          enable: function() {
            return this.$(".action-edit").closest(".actions-item").removeClass("is-hidden");
          },
          disable: function() {
            return this.$(".action-edit").closest(".actions-item").addClass("is-hidden");
          }
        },
        can_delete: {
          enable: function() {
            return this.$(".action-delete").closest(".actions-item").removeClass("is-hidden");
          },
          disable: function() {
            return this.$(".action-delete").closest(".actions-item").addClass("is-hidden");
          }
        },
        can_openclose: {
          enable: function() {
            var _this = this;
            return _.each([".action-close", ".action-pin"], function(selector) {
              return _this.$(selector).closest(".actions-item").removeClass("is-hidden");
            });
          },
          disable: function() {
            var _this = this;
            return _.each([".action-close", ".action-pin"], function(selector) {
              return _this.$(selector).closest(".actions-item").addClass("is-hidden");
            });
          }
        }
      };

      DiscussionContentView.prototype.renderPartialAttrs = function() {
        var attr, value, _ref, _results;
        _ref = this.model.changedAttributes();
        _results = [];
        for (attr in _ref) {
          value = _ref[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.renderAttrs = function() {
        var attr, value, _ref, _results;
        _ref = this.model.attributes;
        _results = [];
        for (attr in _ref) {
          value = _ref[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.makeWmdEditor = function(cls_identifier) {
        if (!this.$el.find(".wmd-panel").length) {
          return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
        }
      };

      DiscussionContentView.prototype.getWmdEditor = function(cls_identifier) {
        return DiscussionUtil.getWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.getWmdContent = function(cls_identifier) {
        return DiscussionUtil.getWmdContent(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.setWmdContent = function(cls_identifier, text) {
        return DiscussionUtil.setWmdContent(this.$el, $.proxy(this.$, this), cls_identifier, text);
      };

      DiscussionContentView.prototype.initialize = function() {
        var _this = this;
        this.model.bind('change', this.renderPartialAttrs, this);
        return this.listenTo(this.model, "change:endorsed", function() {
          if (_this.model instanceof Comment) {
            return _this.trigger("comment:endorse");
          }
        });
      };

      return DiscussionContentView;

    })(Backbone.View);
    this.DiscussionContentShowView = (function(_super) {
      var _this = this;

      __extends(DiscussionContentShowView, _super);

      function DiscussionContentShowView() {
        var _this = this;
        this.toggleClose = function(event) {
          return DiscussionContentShowView.prototype.toggleClose.apply(_this, arguments);
        };
        this.toggleReport = function(event) {
          return DiscussionContentShowView.prototype.toggleReport.apply(_this, arguments);
        };
        this.togglePin = function(event) {
          return DiscussionContentShowView.prototype.togglePin.apply(_this, arguments);
        };
        this.toggleVote = function(event) {
          return DiscussionContentShowView.prototype.toggleVote.apply(_this, arguments);
        };
        this.toggleEndorse = function(event) {
          return DiscussionContentShowView.prototype.toggleEndorse.apply(_this, arguments);
        };
        this.toggleFollow = function(event) {
          return DiscussionContentShowView.prototype.toggleFollow.apply(_this, arguments);
        };
        this.handleSecondaryActionBlur = function(event) {
          return DiscussionContentShowView.prototype.handleSecondaryActionBlur.apply(_this, arguments);
        };
        this.handleSecondaryActionEscape = function(event) {
          return DiscussionContentShowView.prototype.handleSecondaryActionEscape.apply(_this, arguments);
        };
        this.toggleSecondaryActions = function(event) {
          return DiscussionContentShowView.prototype.toggleSecondaryActions.apply(_this, arguments);
        };
        this.updateButtonState = function(selector, checked) {
          return DiscussionContentShowView.prototype.updateButtonState.apply(_this, arguments);
        };
        return DiscussionContentShowView.__super__.constructor.apply(this, arguments);
      }

      DiscussionContentShowView.prototype.events = _.reduce([[".action-follow", "toggleFollow"], [".action-answer", "toggleEndorse"], [".action-endorse", "toggleEndorse"], [".action-vote", "toggleVote"], [".action-more", "toggleSecondaryActions"], [".action-pin", "togglePin"], [".action-edit", "edit"], [".action-delete", "_delete"], [".action-report", "toggleReport"], [".action-close", "toggleClose"]], function(obj, event) {
        var funcName, selector;
        selector = event[0];
        funcName = event[1];
        obj["click " + selector] = function(event) {
          return this[funcName](event);
        };
        obj["keydown " + selector] = function(event) {
          return DiscussionUtil.activateOnSpace(event, this[funcName]);
        };
        return obj;
      }, {});

      DiscussionContentShowView.prototype.updateButtonState = function(selector, checked) {
        var $button;
        $button = this.$(selector);
        $button.toggleClass("is-checked", checked);
        return $button.attr("aria-checked", checked);
      };

      DiscussionContentShowView.prototype.attrRenderer = $.extend({}, DiscussionContentView.prototype.attrRenderer, {
        subscribed: function(subscribed) {
          return this.updateButtonState(".action-follow", subscribed);
        },
        endorsed: function(endorsed) {
          var $button, selector;
          selector = this.model.get("thread").get("thread_type") === "question" ? ".action-answer" : ".action-endorse";
          this.updateButtonState(selector, endorsed);
          $button = this.$(selector);
          $button.closest(".actions-item").toggleClass("is-hidden", !this.model.canBeEndorsed());
          return $button.toggleClass("is-checked", endorsed);
        },
        votes: function(votes) {
          var button, numVotes, selector;
          selector = ".action-vote";
          this.updateButtonState(selector, window.user.voted(this.model));
          button = this.$el.find(selector);
          numVotes = votes.up_count;
          button.find(".js-sr-vote-count").html(interpolate(ngettext("currently %(numVotes)s vote", "currently %(numVotes)s votes", numVotes), {
            numVotes: numVotes
          }, true));
          return button.find(".js-visual-vote-count").html(interpolate(ngettext("%(numVotes)s Vote", "%(numVotes)s Votes", numVotes), {
            numVotes: numVotes
          }, true));
        },
        pinned: function(pinned) {
          this.updateButtonState(".action-pin", pinned);
          return this.$(".post-label-pinned").toggleClass("is-hidden", !pinned);
        },
        abuse_flaggers: function(abuse_flaggers) {
          var flagged;
          flagged = this.model.isFlagged();
          this.updateButtonState(".action-report", flagged);
          return this.$(".post-label-reported").toggleClass("is-hidden", !flagged);
        },
        closed: function(closed) {
          this.updateButtonState(".action-close", closed);
          return this.$(".post-label-closed").toggleClass("is-hidden", !closed);
        }
      });

      DiscussionContentShowView.prototype.toggleSecondaryActions = function(event) {
        event.preventDefault();
        event.stopPropagation();
        this.secondaryActionsExpanded = !this.secondaryActionsExpanded;
        this.$(".action-more").toggleClass("is-expanded", this.secondaryActionsExpanded);
        this.$(".actions-dropdown").toggleClass("is-expanded", this.secondaryActionsExpanded).attr("aria-expanded", this.secondaryActionsExpanded);
        if (this.secondaryActionsExpanded) {
          if (event.type === "keydown") {
            this.$(".action-list-item:first").focus();
          }
          $("body").on("click", this.toggleSecondaryActions);
          $("body").on("keydown", this.handleSecondaryActionEscape);
          return this.$(".action-list-item").on("blur", this.handleSecondaryActionBlur);
        } else {
          $("body").off("click", this.toggleSecondaryActions);
          $("body").off("keydown", this.handleSecondaryActionEscape);
          return this.$(".action-list-item").off("blur", this.handleSecondaryActionBlur);
        }
      };

      DiscussionContentShowView.prototype.handleSecondaryActionEscape = function(event) {
        if (event.keyCode === 27) {
          this.toggleSecondaryActions(event);
          return this.$(".action-more").focus();
        }
      };

      DiscussionContentShowView.prototype.handleSecondaryActionBlur = function(event) {
        var _this = this;
        return setTimeout(function() {
          if (_this.secondaryActionsExpanded && _this.$(".actions-dropdown :focus").length === 0) {
            return _this.toggleSecondaryActions(event);
          }
        }, 10);
      };

      DiscussionContentShowView.prototype.toggleFollow = function(event) {
        var is_subscribing, msg, url;
        event.preventDefault();
        is_subscribing = !this.model.get("subscribed");
        url = this.model.urlFor(is_subscribing ? "follow" : "unfollow");
        if (is_subscribing) {
          msg = gettext("We had some trouble subscribing you to this thread. Please try again.");
        } else {
          msg = gettext("We had some trouble unsubscribing you from this thread. Please try again.");
        }
        return DiscussionUtil.updateWithUndo(this.model, {
          "subscribed": is_subscribing
        }, {
          url: url,
          type: "POST",
          $elem: $(event.currentTarget)
        }, msg);
      };

      DiscussionContentShowView.prototype.toggleEndorse = function(event) {
        var beforeFunc, is_endorsing, msg, updates, url,
          _this = this;
        event.preventDefault();
        is_endorsing = !this.model.get("endorsed");
        url = this.model.urlFor("endorse");
        updates = {
          endorsed: is_endorsing,
          endorsement: is_endorsing ? {
            username: DiscussionUtil.getUser().get("username"),
            time: new Date().toISOString()
          } : null
        };
        if (this.model.get('thread').get('thread_type') === 'question') {
          if (is_endorsing) {
            msg = gettext("We had some trouble marking this response as an answer.  Please try again.");
          } else {
            msg = gettext("We had some trouble removing this response as an answer.  Please try again.");
          }
        } else {
          if (is_endorsing) {
            msg = gettext("We had some trouble marking this response endorsed.  Please try again.");
          } else {
            msg = gettext("We had some trouble removing this endorsement.  Please try again.");
          }
        }
        beforeFunc = function() {
          return _this.trigger("comment:endorse");
        };
        return DiscussionUtil.updateWithUndo(this.model, updates, {
          url: url,
          type: "POST",
          data: {
            endorsed: is_endorsing
          },
          beforeSend: beforeFunc,
          $elem: $(event.currentTarget)
        }, msg).always(this.trigger("comment:endorse"));
      };

      DiscussionContentShowView.prototype.toggleVote = function(event) {
        var is_voting, updates, url, user,
          _this = this;
        event.preventDefault();
        user = DiscussionUtil.getUser();
        is_voting = !user.voted(this.model);
        url = this.model.urlFor(is_voting ? "upvote" : "unvote");
        updates = {
          upvoted_ids: (is_voting ? _.union : _.difference)(user.get('upvoted_ids'), [this.model.id])
        };
        return DiscussionUtil.updateWithUndo(user, updates, {
          url: url,
          type: "POST",
          $elem: $(event.currentTarget)
        }, gettext("We had some trouble saving your vote.  Please try again.")).done(function() {
          if (is_voting) {
            return _this.model.vote();
          } else {
            return _this.model.unvote();
          }
        });
      };

      DiscussionContentShowView.prototype.togglePin = function(event) {
        var is_pinning, msg, url;
        event.preventDefault();
        is_pinning = !this.model.get("pinned");
        url = this.model.urlFor(is_pinning ? "pinThread" : "unPinThread");
        if (is_pinning) {
          msg = gettext("We had some trouble pinning this thread. Please try again.");
        } else {
          msg = gettext("We had some trouble unpinning this thread. Please try again.");
        }
        return DiscussionUtil.updateWithUndo(this.model, {
          pinned: is_pinning
        }, {
          url: url,
          type: "POST",
          $elem: $(event.currentTarget)
        }, msg);
      };

      DiscussionContentShowView.prototype.toggleReport = function(event) {
        var is_flagging, msg, updates, url;
        event.preventDefault();
        if (this.model.isFlagged()) {
          is_flagging = false;
          msg = gettext("We had some trouble removing your flag on this post.  Please try again.");
        } else {
          is_flagging = true;
          msg = gettext("We had some trouble reporting this post.  Please try again.");
        }
        url = this.model.urlFor(is_flagging ? "flagAbuse" : "unFlagAbuse");
        updates = {
          abuse_flaggers: (is_flagging ? _.union : _.difference)(this.model.get("abuse_flaggers"), [DiscussionUtil.getUser().id])
        };
        return DiscussionUtil.updateWithUndo(this.model, updates, {
          url: url,
          type: "POST",
          $elem: $(event.currentTarget)
        }, msg);
      };

      DiscussionContentShowView.prototype.toggleClose = function(event) {
        var is_closing, msg, updates;
        event.preventDefault();
        is_closing = !this.model.get('closed');
        if (is_closing) {
          msg = gettext("We had some trouble closing this thread.  Please try again.");
        } else {
          msg = gettext("We had some trouble reopening this thread.  Please try again.");
        }
        updates = {
          closed: is_closing
        };
        return DiscussionUtil.updateWithUndo(this.model, updates, {
          url: this.model.urlFor("close"),
          type: "POST",
          data: updates,
          $elem: $(event.currentTarget)
        }, msg);
      };

      DiscussionContentShowView.prototype.getAuthorDisplay = function() {
        return _.template($("#post-user-display-template").html())({
          username: this.model.get('username') || null,
          user_url: this.model.get('user_url'),
          is_community_ta: this.model.get('community_ta_authored'),
          is_staff: this.model.get('staff_authored')
        });
      };

      DiscussionContentShowView.prototype.getEndorserDisplay = function() {
        var endorsement;
        endorsement = this.model.get('endorsement');
        if (endorsement && endorsement.username) {
          return _.template($("#post-user-display-template").html())({
            username: endorsement.username,
            user_url: DiscussionUtil.urlFor('user_profile', endorsement.user_id),
            is_community_ta: DiscussionUtil.isTA(endorsement.user_id),
            is_staff: DiscussionUtil.isStaff(endorsement.user_id)
          });
        } else {
          return null;
        }
      };

      return DiscussionContentShowView;

    }).call(this, DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadEditView = (function(_super) {

      __extends(DiscussionThreadEditView, _super);

      function DiscussionThreadEditView() {
        return DiscussionThreadEditView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      DiscussionThreadEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadEditView.prototype.initialize = function() {
        return DiscussionThreadEditView.__super__.initialize.call(this);
      };

      DiscussionThreadEditView.prototype.render = function() {
        this.template = _.template($("#thread-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      DiscussionThreadEditView.prototype.update = function(event) {
        return this.trigger("thread:update", event);
      };

      DiscussionThreadEditView.prototype.cancel_edit = function(event) {
        return this.trigger("thread:cancel_edit", event);
      };

      return DiscussionThreadEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadListView = (function(_super) {
      var _this = this;

      __extends(DiscussionThreadListView, _super);

      function DiscussionThreadListView() {
        var _this = this;
        this.updateEmailNotifications = function() {
          return DiscussionThreadListView.prototype.updateEmailNotifications.apply(_this, arguments);
        };
        this.retrieveFollowed = function() {
          return DiscussionThreadListView.prototype.retrieveFollowed.apply(_this, arguments);
        };
        this.chooseCohort = function(event) {
          return DiscussionThreadListView.prototype.chooseCohort.apply(_this, arguments);
        };
        this.chooseFilter = function(event) {
          return DiscussionThreadListView.prototype.chooseFilter.apply(_this, arguments);
        };
        this.filterTopics = function(event) {
          return DiscussionThreadListView.prototype.filterTopics.apply(_this, arguments);
        };
        this.toggleBrowseMenu = function(event) {
          return DiscussionThreadListView.prototype.toggleBrowseMenu.apply(_this, arguments);
        };
        this.hideBrowseMenu = function() {
          return DiscussionThreadListView.prototype.hideBrowseMenu.apply(_this, arguments);
        };
        this.showBrowseMenu = function() {
          return DiscussionThreadListView.prototype.showBrowseMenu.apply(_this, arguments);
        };
        this.isBrowseMenuVisible = function() {
          return DiscussionThreadListView.prototype.isBrowseMenuVisible.apply(_this, arguments);
        };
        this.threadRemoved = function(thread_id) {
          return DiscussionThreadListView.prototype.threadRemoved.apply(_this, arguments);
        };
        this.threadSelected = function(e) {
          return DiscussionThreadListView.prototype.threadSelected.apply(_this, arguments);
        };
        this.renderThread = function(thread) {
          return DiscussionThreadListView.prototype.renderThread.apply(_this, arguments);
        };
        this.loadMorePages = function(event) {
          return DiscussionThreadListView.prototype.loadMorePages.apply(_this, arguments);
        };
        this.showMetadataAccordingToSort = function() {
          return DiscussionThreadListView.prototype.showMetadataAccordingToSort.apply(_this, arguments);
        };
        this.renderThreads = function() {
          return DiscussionThreadListView.prototype.renderThreads.apply(_this, arguments);
        };
        this.updateSidebar = function() {
          return DiscussionThreadListView.prototype.updateSidebar.apply(_this, arguments);
        };
        this.addAndSelectThread = function(thread) {
          return DiscussionThreadListView.prototype.addAndSelectThread.apply(_this, arguments);
        };
        this.reloadDisplayedCollection = function(thread) {
          return DiscussionThreadListView.prototype.reloadDisplayedCollection.apply(_this, arguments);
        };
        this.clearSearchAlerts = function() {
          return DiscussionThreadListView.prototype.clearSearchAlerts.apply(_this, arguments);
        };
        this.removeSearchAlert = function(searchAlert) {
          return DiscussionThreadListView.prototype.removeSearchAlert.apply(_this, arguments);
        };
        this.addSearchAlert = function(message) {
          return DiscussionThreadListView.prototype.addSearchAlert.apply(_this, arguments);
        };
        return DiscussionThreadListView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadListView.prototype.events = {
        "click .forum-nav-browse": "toggleBrowseMenu",
        "keypress .forum-nav-browse-filter-input": function(event) {
          return DiscussionUtil.ignoreEnterKey(event);
        },
        "keyup .forum-nav-browse-filter-input": "filterTopics",
        "click .forum-nav-browse-menu-wrapper": "ignoreClick",
        "click .forum-nav-browse-title": "selectTopic",
        "keydown .forum-nav-search-input": "performSearch",
        "change .forum-nav-sort-control": "sortThreads",
        "click .forum-nav-thread-link": "threadSelected",
        "click .forum-nav-load-more-link": "loadMorePages",
        "change .forum-nav-filter-main-control": "chooseFilter",
        "change .forum-nav-filter-cohort-control": "chooseCohort"
      };

      DiscussionThreadListView.prototype.initialize = function(options) {
        var _this = this;
        this.courseSettings = options.courseSettings;
        this.displayedCollection = new Discussion(this.collection.models, {
          pages: this.collection.pages
        });
        this.collection.on("change", this.reloadDisplayedCollection);
        this.discussionIds = "";
        this.collection.on("reset", function(discussion) {
          var board;
          board = $(".current-board").html();
          _this.displayedCollection.current_page = discussion.current_page;
          _this.displayedCollection.pages = discussion.pages;
          return _this.displayedCollection.reset(discussion.models);
        });
        this.collection.on("add", this.addAndSelectThread);
        this.sidebar_padding = 10;
        this.boardName;
        this.template = _.template($("#thread-list-template").html());
        this.current_search = "";
        this.mode = 'all';
        this.searchAlertCollection = new Backbone.Collection([], {
          model: Backbone.Model
        });
        this.searchAlertCollection.on("add", function(searchAlert) {
          var content;
          content = _.template($("#search-alert-template").html(), {
            'message': searchAlert.attributes.message,
            'cid': searchAlert.cid
          });
          _this.$(".search-alerts").append(content);
          return _this.$("#search-alert-" + searchAlert.cid + " a.dismiss").bind("click", searchAlert, function(event) {
            return _this.removeSearchAlert(event.data.cid);
          });
        });
        this.searchAlertCollection.on("remove", function(searchAlert) {
          return _this.$("#search-alert-" + searchAlert.cid).remove();
        });
        return this.searchAlertCollection.on("reset", function() {
          return _this.$(".search-alerts").empty();
        });
      };

      DiscussionThreadListView.prototype.addSearchAlert = function(message) {
        var m;
        m = new Backbone.Model({
          "message": message
        });
        this.searchAlertCollection.add(m);
        return m;
      };

      DiscussionThreadListView.prototype.removeSearchAlert = function(searchAlert) {
        return this.searchAlertCollection.remove(searchAlert);
      };

      DiscussionThreadListView.prototype.clearSearchAlerts = function() {
        return this.searchAlertCollection.reset();
      };

      DiscussionThreadListView.prototype.reloadDisplayedCollection = function(thread) {
        var active, content, current_el, thread_id;
        this.clearSearchAlerts();
        thread_id = thread.get('id');
        content = this.renderThread(thread);
        current_el = this.$(".forum-nav-thread[data-id=" + thread_id + "]");
        active = current_el.has(".forum-nav-thread-link.is-active").length !== 0;
        current_el.replaceWith(content);
        this.showMetadataAccordingToSort();
        if (active) {
          return this.setActiveThread(thread_id);
        }
      };

      DiscussionThreadListView.prototype.addAndSelectThread = function(thread) {
        var commentable_id, menuItem,
          _this = this;
        commentable_id = thread.get("commentable_id");
        menuItem = this.$(".forum-nav-browse-menu-item[data-discussion-id]").filter(function() {
          return $(this).data("discussion-id") === commentable_id;
        });
        this.setCurrentTopicDisplay(this.getPathText(menuItem));
        return this.retrieveDiscussion(commentable_id, function() {
          return _this.trigger("thread:created", thread.get('id'));
        });
      };

      DiscussionThreadListView.prototype.updateSidebar = function() {
        var amount, browseFilterHeight, discussionBody, discussionBottomOffset, discussionsBodyBottom, discussionsBodyTop, headerHeight, refineBarHeight, scrollTop, sidebar, sidebarHeight, topOffset, windowHeight;
        scrollTop = $(window).scrollTop();
        windowHeight = $(window).height();
        discussionBody = $(".discussion-column");
        discussionsBodyTop = discussionBody[0] ? discussionBody.offset().top : void 0;
        discussionsBodyBottom = discussionsBodyTop + discussionBody.outerHeight();
        sidebar = $(".forum-nav");
        if (scrollTop > discussionsBodyTop - this.sidebar_padding) {
          sidebar.css('top', scrollTop - discussionsBodyTop + this.sidebar_padding);
        } else {
          sidebar.css('top', '0');
        }
        sidebarHeight = windowHeight - Math.max(discussionsBodyTop - scrollTop, this.sidebar_padding);
        topOffset = scrollTop + windowHeight;
        discussionBottomOffset = discussionsBodyBottom + this.sidebar_padding;
        amount = Math.max(topOffset - discussionBottomOffset, 0);
        sidebarHeight = sidebarHeight - this.sidebar_padding - amount;
        sidebarHeight = Math.min(sidebarHeight + 1, discussionBody.outerHeight());
        sidebar.css('height', sidebarHeight);
        headerHeight = this.$(".forum-nav-header").outerHeight();
        refineBarHeight = this.$(".forum-nav-refine-bar").outerHeight();
        browseFilterHeight = this.$(".forum-nav-browse-filter").outerHeight();
        this.$('.forum-nav-thread-list').css('height', (sidebarHeight - headerHeight - refineBarHeight - 2) + 'px');
        return this.$('.forum-nav-browse-menu').css('height', (sidebarHeight - headerHeight - browseFilterHeight - 2) + 'px');
      };

      DiscussionThreadListView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      DiscussionThreadListView.prototype.render = function() {
        this.timer = 0;
        this.$el.html(this.template({
          isCohorted: this.courseSettings.get("is_cohorted"),
          isPrivilegedUser: DiscussionUtil.isPrivilegedUser()
        }));
        this.$(".forum-nav-sort-control").val(this.collection.sort_preference);
        $(window).bind("load", this.updateSidebar);
        $(window).bind("scroll", this.updateSidebar);
        $(window).bind("resize", this.updateSidebar);
        this.displayedCollection.on("reset", this.renderThreads);
        this.displayedCollection.on("thread:remove", this.renderThreads);
        this.renderThreads();
        return this;
      };

      DiscussionThreadListView.prototype.renderThreads = function() {
        var content, rendered, thread, _i, _len, _ref;
        this.$(".forum-nav-thread-list").html("");
        rendered = $("<div></div>");
        _ref = this.displayedCollection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          thread = _ref[_i];
          content = this.renderThread(thread);
          rendered.append(content);
        }
        this.$(".forum-nav-thread-list").html(rendered.html());
        this.showMetadataAccordingToSort();
        this.renderMorePages();
        this.updateSidebar();
        return this.trigger("threads:rendered");
      };

      DiscussionThreadListView.prototype.showMetadataAccordingToSort = function() {
        var commentCounts, voteCounts;
        voteCounts = this.$(".forum-nav-thread-votes-count");
        commentCounts = this.$(".forum-nav-thread-comments-count");
        voteCounts.hide();
        commentCounts.hide();
        switch (this.$(".forum-nav-sort-control").val()) {
          case "date":
          case "comments":
            return commentCounts.show();
          case "votes":
            return voteCounts.show();
        }
      };

      DiscussionThreadListView.prototype.renderMorePages = function() {
        if (this.displayedCollection.hasMorePages()) {
          return this.$(".forum-nav-thread-list").append("<li class='forum-nav-load-more'><a href='#' class='forum-nav-load-more-link'>" + gettext("Load more") + "</a></li>");
        }
      };

      DiscussionThreadListView.prototype.getLoadingContent = function(srText) {
        return '<div class="forum-nav-loading" tabindex="0"><span class="icon-spinner icon-spin"/><span class="sr" role="alert">' + srText + '</span></div>';
      };

      DiscussionThreadListView.prototype.loadMorePages = function(event) {
        var error, lastThread, loadMoreElem, loadingElem, options, _ref,
          _this = this;
        if (event) {
          event.preventDefault();
        }
        loadMoreElem = this.$(".forum-nav-load-more");
        loadMoreElem.html(this.getLoadingContent(gettext("Loading more threads")));
        loadingElem = loadMoreElem.find(".forum-nav-loading");
        DiscussionUtil.makeFocusTrap(loadingElem);
        loadingElem.focus();
        options = {
          filter: this.filter
        };
        switch (this.mode) {
          case 'search':
            options.search_text = this.current_search;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'followed':
            options.user_id = window.user.id;
            options.group_id = "all";
            break;
          case 'commentables':
            options.commentable_ids = this.discussionIds;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'all':
            if (this.group_id) {
              options.group_id = this.group_id;
            }
        }
        lastThread = (_ref = this.collection.last()) != null ? _ref.get('id') : void 0;
        if (lastThread) {
          this.once("threads:rendered", function() {
            return $(".forum-nav-thread[data-id='" + lastThread + "'] + .forum-nav-thread .forum-nav-thread-link").focus();
          });
        } else {
          this.once("threads:rendered", function() {
            var _ref1;
            return (_ref1 = $(".forum-nav-thread-link").first()) != null ? _ref1.focus() : void 0;
          });
        }
        error = function() {
          _this.renderThreads();
          return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading more threads. Please try again."));
        };
        return this.collection.retrieveAnotherPage(this.mode, options, {
          sort_key: this.$(".forum-nav-sort-control").val()
        }, error);
      };

      DiscussionThreadListView.prototype.renderThread = function(thread) {
        var content, unreadCount;
        content = $(_.template($("#thread-list-item-template").html())(thread.toJSON()));
        unreadCount = thread.get('unread_comments_count') + (thread.get("read") ? 0 : 1);
        if (unreadCount > 0) {
          content.find('.forum-nav-thread-comments-count').attr("data-tooltip", interpolate(ngettext('%(unread_count)s new comment', '%(unread_count)s new comments', unreadCount), {
            unread_count: unreadCount
          }, true));
        }
        return content;
      };

      DiscussionThreadListView.prototype.threadSelected = function(e) {
        var thread_id;
        thread_id = $(e.target).closest(".forum-nav-thread").attr("data-id");
        this.setActiveThread(thread_id);
        this.trigger("thread:selected", thread_id);
        return false;
      };

      DiscussionThreadListView.prototype.threadRemoved = function(thread_id) {
        return this.trigger("thread:removed", thread_id);
      };

      DiscussionThreadListView.prototype.setActiveThread = function(thread_id) {
        this.$(".forum-nav-thread[data-id!='" + thread_id + "'] .forum-nav-thread-link").removeClass("is-active");
        return this.$(".forum-nav-thread[data-id='" + thread_id + "'] .forum-nav-thread-link").addClass("is-active");
      };

      DiscussionThreadListView.prototype.goHome = function() {
        var thread_id, url,
          _this = this;
        this.template = _.template($("#discussion-home").html());
        $(".forum-content").html(this.template);
        $(".forum-nav-thread-list a").removeClass("is-active");
        $("input.email-setting").bind("click", this.updateEmailNotifications);
        url = DiscussionUtil.urlFor("notifications_status", window.user.get("id"));
        DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            if (response.status) {
              return $('input.email-setting').attr('checked', 'checked');
            } else {
              return $('input.email-setting').removeAttr('checked');
            }
          }
        });
        thread_id = null;
        return this.trigger("thread:removed");
      };

      DiscussionThreadListView.prototype.isBrowseMenuVisible = function() {
        return this.$(".forum-nav-browse-menu-wrapper").is(":visible");
      };

      DiscussionThreadListView.prototype.showBrowseMenu = function() {
        if (!this.isBrowseMenuVisible()) {
          this.$(".forum-nav-browse").addClass("is-active");
          this.$(".forum-nav-browse-menu-wrapper").show();
          this.$(".forum-nav-thread-list-wrapper").hide();
          $(".forum-nav-browse-filter-input").focus();
          $("body").bind("click", this.hideBrowseMenu);
          return this.updateSidebar();
        }
      };

      DiscussionThreadListView.prototype.hideBrowseMenu = function() {
        if (this.isBrowseMenuVisible()) {
          this.$(".forum-nav-browse").removeClass("is-active");
          this.$(".forum-nav-browse-menu-wrapper").hide();
          this.$(".forum-nav-thread-list-wrapper").show();
          $("body").unbind("click", this.hideBrowseMenu);
          return this.updateSidebar();
        }
      };

      DiscussionThreadListView.prototype.toggleBrowseMenu = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.isBrowseMenuVisible()) {
          return this.hideBrowseMenu();
        } else {
          return this.showBrowseMenu();
        }
      };

      DiscussionThreadListView.prototype.getPathText = function(item) {
        var path, pathText, pathTitles;
        path = item.parents(".forum-nav-browse-menu-item").andSelf();
        pathTitles = path.children(".forum-nav-browse-title").map(function(i, elem) {
          return $(elem).text();
        }).get();
        return pathText = pathTitles.join(" / ");
      };

      DiscussionThreadListView.prototype.filterTopics = function(event) {
        var items, query,
          _this = this;
        query = $(event.target).val();
        items = this.$(".forum-nav-browse-menu-item");
        if (query.length === 0) {
          return items.show();
        } else {
          items.hide();
          return items.each(function(i, item) {
            var path, pathText;
            item = $(item);
            if (!item.is(":visible")) {
              pathText = _this.getPathText(item).toLowerCase();
              if (query.split(" ").every(function(term) {
                return pathText.search(term.toLowerCase()) !== -1;
              })) {
                path = item.parents(".forum-nav-browse-menu-item").andSelf();
                return path.add(item.find(".forum-nav-browse-menu-item")).show();
              }
            }
          });
        }
      };

      DiscussionThreadListView.prototype.setCurrentTopicDisplay = function(text) {
        return this.$(".forum-nav-browse-current").text(this.fitName(text));
      };

      DiscussionThreadListView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.$(".forum-nav-browse-current").css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      DiscussionThreadListView.prototype.fitName = function(name) {
        var partialName, path, prefix, rawName, width, x;
        this.maxNameWidth = this.$(".forum-nav-browse").width() - parseInt(this.$(".forum-nav-browse").css("padding-left")) - parseInt(this.$(".forum-nav-browse").css("padding-right")) - this.$(".forum-nav-browse .icon").outerWidth(true) - this.$(".forum-nav-browse-drop-arrow").outerWidth(true);
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref, _results;
          _ref = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        prefix = "";
        while (path.length > 1) {
          prefix = gettext("…") + "/";
          path.shift();
          partialName = prefix + path.join("/");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = prefix + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = prefix + rawName + gettext("…");
        }
        return name;
      };

      DiscussionThreadListView.prototype.selectTopic = function(event) {
        var allItems, discussionIds, item;
        event.preventDefault();
        this.hideBrowseMenu();
        this.clearSearch();
        item = $(event.target).closest('.forum-nav-browse-menu-item');
        this.setCurrentTopicDisplay(this.getPathText(item));
        if (item.hasClass("forum-nav-browse-menu-all")) {
          this.discussionIds = "";
          this.$('.forum-nav-filter-cohort').show();
          return this.retrieveAllThreads();
        } else if (item.hasClass("forum-nav-browse-menu-following")) {
          this.retrieveFollowed();
          return this.$('.forum-nav-filter-cohort').hide();
        } else {
          allItems = item.find(".forum-nav-browse-menu-item").andSelf();
          discussionIds = allItems.filter("[data-discussion-id]").map(function(i, elem) {
            return $(elem).data("discussion-id");
          }).get();
          this.retrieveDiscussions(discussionIds);
          return this.$(".forum-nav-filter-cohort").toggle(item.data('cohorted') === true);
        }
      };

      DiscussionThreadListView.prototype.chooseFilter = function(event) {
        this.filter = $(".forum-nav-filter-main-control :selected").val();
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.chooseCohort = function(event) {
        this.group_id = this.$('.forum-nav-filter-cohort-control :selected').val();
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveDiscussion = function(discussion_id, callback) {
        var url,
          _this = this;
        if (callback == null) {
          callback = null;
        }
        url = DiscussionUtil.urlFor("retrieve_discussion", discussion_id);
        return DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            _this.collection.current_page = response.page;
            _this.collection.pages = response.num_pages;
            _this.collection.reset(response.discussion_data);
            Content.loadContentInfos(response.annotated_content_info);
            _this.displayedCollection.reset(_this.collection.models);
            if (callback != null) {
              return callback();
            }
          }
        });
      };

      DiscussionThreadListView.prototype.retrieveDiscussions = function(discussion_ids) {
        this.discussionIds = discussion_ids.join(',');
        this.mode = 'commentables';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveAllThreads = function() {
        this.mode = 'all';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveFirstPage = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.sortThreads = function(event) {
        this.displayedCollection.setSortComparator(this.$(".forum-nav-sort-control").val());
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.performSearch = function(event) {
        var text;
        if (event.which === 13) {
          event.preventDefault();
          this.hideBrowseMenu();
          this.setCurrentTopicDisplay(gettext("Search Results"));
          text = this.$(".forum-nav-search-input").val();
          return this.searchFor(text);
        }
      };

      DiscussionThreadListView.prototype.searchFor = function(text) {
        var url,
          _this = this;
        this.clearSearchAlerts();
        this.clearFilters();
        this.mode = 'search';
        this.current_search = text;
        url = DiscussionUtil.urlFor("search");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".forum-nav-search-input"),
          data: {
            text: text
          },
          url: url,
          type: "GET",
          dataType: 'json',
          $loading: $,
          loadingCallback: function() {
            return _this.$(".forum-nav-thread-list").html("<li class='forum-nav-load-more'>" + _this.getLoadingContent(gettext("Loading thread list")) + "</li>");
          },
          loadedCallback: function() {
            return _this.$(".forum-nav-thread-list .forum-nav-load-more").remove();
          },
          success: function(response, textStatus) {
            var message;
            if (textStatus === 'success') {
              _this.collection.reset(response.discussion_data);
              Content.loadContentInfos(response.annotated_content_info);
              _this.collection.current_page = response.page;
              _this.collection.pages = response.num_pages;
              if (!_.isNull(response.corrected_text)) {
                message = interpolate(_.escape(gettext('No results found for %(original_query)s. Showing results for %(suggested_query)s.')), {
                  "original_query": "<em>" + _.escape(text) + "</em>",
                  "suggested_query": "<em>" + response.corrected_text + "</em>"
                }, true);
                _this.addSearchAlert(message);
              } else if (response.discussion_data.length === 0) {
                _this.addSearchAlert(gettext('No threads matched your query.'));
              }
              _this.displayedCollection.reset(_this.collection.models);
              if (text) {
                return _this.searchForUser(text);
              }
            }
          }
        });
      };

      DiscussionThreadListView.prototype.searchForUser = function(text) {
        var _this = this;
        return DiscussionUtil.safeAjax({
          data: {
            username: text
          },
          url: DiscussionUtil.urlFor("users"),
          type: "GET",
          dataType: 'json',
          error: function() {},
          success: function(response) {
            var message;
            if (response.users.length > 0) {
              message = interpolate(_.escape(gettext('Show posts by %(username)s.')), {
                "username": _.template('<a class="link-jump" href="<%= url %>"><%- username %></a>', {
                  url: DiscussionUtil.urlFor("user_profile", response.users[0].id),
                  username: response.users[0].username
                })
              }, true);
              return _this.addSearchAlert(message);
            }
          }
        });
      };

      DiscussionThreadListView.prototype.clearSearch = function() {
        this.$(".forum-nav-search-input").val("");
        this.current_search = "";
        return this.clearSearchAlerts();
      };

      DiscussionThreadListView.prototype.clearFilters = function() {
        this.$(".forum-nav-filter-main-control").val("all");
        return this.$(".forum-nav-filter-cohort-control").val("all");
      };

      DiscussionThreadListView.prototype.retrieveFollowed = function() {
        this.mode = 'followed';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.updateEmailNotifications = function() {
        var _this = this;
        if ($('input.email-setting').attr('checked')) {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("enable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').removeAttr('checked');
            }
          });
        } else {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("disable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').attr('checked', 'checked');
            }
          });
        }
      };

      return DiscussionThreadListView;

    }).call(this, Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadProfileView = (function(_super) {

      __extends(DiscussionThreadProfileView, _super);

      function DiscussionThreadProfileView() {
        return DiscussionThreadProfileView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadProfileView.prototype.render = function() {
        var element, params;
        this.template = DiscussionUtil.getTemplate("_profile_thread");
        this.convertMath();
        this.abbreviateBody();
        params = $.extend(this.model.toJSON(), {
          permalink: this.model.urlFor('retrieve')
        });
        if (!this.model.get('anonymous')) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        this.$el.html(Mustache.render(this.template, params));
        this.$("span.timeago").timeago();
        element = this.$(".post-body");
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
        return this;
      };

      DiscussionThreadProfileView.prototype.convertMath = function() {
        return this.model.set('markdownBody', DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(this.model.get('body'))));
      };

      DiscussionThreadProfileView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateHTML(this.model.get('markdownBody'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      return DiscussionThreadProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {

      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        return DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadShowView.prototype.initialize = function(options) {
        var _ref;
        DiscussionThreadShowView.__super__.initialize.call(this);
        this.mode = options.mode || "inline";
        if ((_ref = this.mode) !== "tab" && _ref !== "inline") {
          throw new Error("invalid mode: " + this.mode);
        }
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        var context;
        this.template = _.template($("#thread-show-template").html());
        context = $.extend({
          mode: this.mode,
          flagged: this.model.isFlagged(),
          author_display: this.getAuthorDisplay(),
          cid: this.model.cid
        }, this.model.attributes);
        return this.template(context);
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadView = (function(_super) {
      var INITIAL_RESPONSE_PAGE_SIZE, SUBSEQUENT_RESPONSE_PAGE_SIZE;

      __extends(DiscussionThreadView, _super);

      function DiscussionThreadView() {
        var _this = this;
        this._delete = function(event) {
          return DiscussionThreadView.prototype._delete.apply(_this, arguments);
        };
        this.cancelEdit = function(event) {
          return DiscussionThreadView.prototype.cancelEdit.apply(_this, arguments);
        };
        this.update = function(event) {
          return DiscussionThreadView.prototype.update.apply(_this, arguments);
        };
        this.edit = function(event) {
          return DiscussionThreadView.prototype.edit.apply(_this, arguments);
        };
        this.endorseThread = function() {
          return DiscussionThreadView.prototype.endorseThread.apply(_this, arguments);
        };
        this.addComment = function() {
          return DiscussionThreadView.prototype.addComment.apply(_this, arguments);
        };
        this.renderAddResponseButton = function() {
          return DiscussionThreadView.prototype.renderAddResponseButton.apply(_this, arguments);
        };
        this.renderResponseToList = function(response, listSelector, options) {
          return DiscussionThreadView.prototype.renderResponseToList.apply(_this, arguments);
        };
        this.renderResponseCountAndPagination = function(responseTotal) {
          return DiscussionThreadView.prototype.renderResponseCountAndPagination.apply(_this, arguments);
        };
        return DiscussionThreadView.__super__.constructor.apply(this, arguments);
      }

      INITIAL_RESPONSE_PAGE_SIZE = 25;

      SUBSEQUENT_RESPONSE_PAGE_SIZE = 100;

      DiscussionThreadView.prototype.events = {
        "click .discussion-submit-post": "submitComment",
        "click .add-response-btn": "scrollToAddResponse",
        "click .forum-thread-expand": "expand",
        "click .forum-thread-collapse": "collapse"
      };

      DiscussionThreadView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadView.prototype.isQuestion = function() {
        return this.model.get("thread_type") === "question";
      };

      DiscussionThreadView.prototype.initialize = function(options) {
        var _ref;
        DiscussionThreadView.__super__.initialize.call(this);
        this.mode = options.mode || "inline";
        if ((_ref = this.mode) !== "tab" && _ref !== "inline") {
          throw new Error("invalid mode: " + this.mode);
        }
        this.createShowView();
        this.responses = new Comments();
        this.loadedResponses = false;
        if (this.isQuestion()) {
          return this.markedAnswers = new Comments();
        }
      };

      DiscussionThreadView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadView.prototype.render = function() {
        var _this = this;
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.makeWmdEditor("reply-body");
        this.renderAddResponseButton();
        this.responses.on("add", function(response) {
          return _this.renderResponseToList(response, ".js-response-list", {});
        });
        if (this.isQuestion()) {
          this.markedAnswers.on("add", function(response) {
            return _this.renderResponseToList(response, ".js-marked-answer-list", {
              collapseComments: true
            });
          });
        }
        if (this.mode === "tab") {
          setTimeout((function() {
            return _this.loadInitialResponses();
          }), 100);
          return this.$(".post-tools").hide();
        } else {
          return this.collapse();
        }
      };

      DiscussionThreadView.prototype.attrRenderer = $.extend({}, DiscussionContentView.prototype.attrRenderer, {
        closed: function(closed) {
          this.$(".discussion-reply-new").toggle(!closed);
          return this.renderAddResponseButton();
        }
      });

      DiscussionThreadView.prototype.expand = function(event) {
        if (event) {
          event.preventDefault();
        }
        this.$el.addClass("expanded");
        this.$el.find(".post-body").text(this.model.get("body"));
        this.showView.convertMath();
        this.$el.find(".forum-thread-expand").hide();
        this.$el.find(".forum-thread-collapse").show();
        this.$el.find(".post-extended-content").show();
        if (!this.loadedResponses) {
          return this.loadInitialResponses();
        }
      };

      DiscussionThreadView.prototype.collapse = function(event) {
        if (event) {
          event.preventDefault();
        }
        this.$el.removeClass("expanded");
        this.$el.find(".post-body").text(this.getAbbreviatedBody());
        this.showView.convertMath();
        this.$el.find(".forum-thread-expand").show();
        this.$el.find(".forum-thread-collapse").hide();
        return this.$el.find(".post-extended-content").hide();
      };

      DiscussionThreadView.prototype.getAbbreviatedBody = function() {
        var abbreviated, cached;
        cached = this.model.get("abbreviatedBody");
        if (cached) {
          return cached;
        } else {
          abbreviated = DiscussionUtil.abbreviateString(this.model.get("body"), 140);
          this.model.set("abbreviatedBody", abbreviated);
          return abbreviated;
        }
      };

      DiscussionThreadView.prototype.cleanup = function() {
        if (this.responsesRequest != null) {
          return this.responsesRequest.abort();
        }
      };

      DiscussionThreadView.prototype.loadResponses = function(responseLimit, elem, firstLoad) {
        var _this = this;
        return this.responsesRequest = DiscussionUtil.safeAjax({
          url: DiscussionUtil.urlFor('retrieve_single_thread', this.model.get('commentable_id'), this.model.id),
          data: {
            resp_skip: this.responses.size(),
            resp_limit: responseLimit ? responseLimit : void 0
          },
          $elem: elem,
          $loading: elem,
          takeFocus: true,
          complete: function() {
            return _this.responseRequest = null;
          },
          success: function(data, textStatus, xhr) {
            Content.loadContentInfos(data['annotated_content_info']);
            if (_this.isQuestion()) {
              _this.markedAnswers.add(data["content"]["endorsed_responses"]);
            }
            _this.responses.add(_this.isQuestion() ? data["content"]["non_endorsed_responses"] : data["content"]["children"]);
            _this.renderResponseCountAndPagination(_this.isQuestion() ? data["content"]["non_endorsed_resp_total"] : data["content"]["resp_total"]);
            _this.trigger("thread:responses:rendered");
            return _this.loadedResponses = true;
          },
          error: function(xhr, textStatus) {
            if (textStatus === 'abort') {
              return;
            }
            if (xhr.status === 404) {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("The thread you selected has been deleted. Please select another thread."));
            } else if (firstLoad) {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading responses. Please reload the page."));
            } else {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading more responses. Please try again."));
            }
          }
        });
      };

      DiscussionThreadView.prototype.loadInitialResponses = function() {
        return this.loadResponses(INITIAL_RESPONSE_PAGE_SIZE, this.$el.find(".js-response-list"), true);
      };

      DiscussionThreadView.prototype.renderResponseCountAndPagination = function(responseTotal) {
        var buttonText, loadMoreButton, responseCountFormat, responseLimit, responsePagination, responsesRemaining, showingResponsesText,
          _this = this;
        if (this.isQuestion() && this.markedAnswers.length !== 0) {
          responseCountFormat = ngettext("%(numResponses)s other response", "%(numResponses)s other responses", responseTotal);
        } else {
          responseCountFormat = ngettext("%(numResponses)s response", "%(numResponses)s responses", responseTotal);
        }
        this.$el.find(".response-count").html(interpolate(responseCountFormat, {
          numResponses: responseTotal
        }, true));
        responsePagination = this.$el.find(".response-pagination");
        responsePagination.empty();
        if (responseTotal > 0) {
          responsesRemaining = responseTotal - this.responses.size();
          showingResponsesText = responsesRemaining === 0 ? gettext("Showing all responses") : interpolate(ngettext("Showing first response", "Showing first %(numResponses)s responses", this.responses.size()), {
            numResponses: this.responses.size()
          }, true);
          responsePagination.append($("<span>").addClass("response-display-count").html(_.escape(showingResponsesText)));
          if (responsesRemaining > 0) {
            if (responsesRemaining < SUBSEQUENT_RESPONSE_PAGE_SIZE) {
              responseLimit = null;
              buttonText = gettext("Load all responses");
            } else {
              responseLimit = SUBSEQUENT_RESPONSE_PAGE_SIZE;
              buttonText = interpolate(gettext("Load next %(numResponses)s responses"), {
                numResponses: responseLimit
              }, true);
            }
            loadMoreButton = $("<button>").addClass("load-response-button").html(_.escape(buttonText));
            loadMoreButton.click(function(event) {
              return _this.loadResponses(responseLimit, loadMoreButton);
            });
            return responsePagination.append(loadMoreButton);
          }
        }
      };

      DiscussionThreadView.prototype.renderResponseToList = function(response, listSelector, options) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView($.extend({
          model: response
        }, options));
        view.on("comment:add", this.addComment);
        view.on("comment:endorse", this.endorseThread);
        view.render();
        this.$el.find(listSelector).append(view.el);
        return view.afterInsert();
      };

      DiscussionThreadView.prototype.renderAddResponseButton = function() {
        if (this.model.hasResponses() && this.model.can('can_reply') && !this.model.get('closed')) {
          return this.$el.find('div.add-response').show();
        } else {
          return this.$el.find('div.add-response').hide();
        }
      };

      DiscussionThreadView.prototype.scrollToAddResponse = function(event) {
        var form;
        event.preventDefault();
        form = $(event.target).parents('article.discussion-article').find('form.discussion-reply-new');
        $('html, body').scrollTop(form.offset().top);
        return form.find('.wmd-panel textarea').focus();
      };

      DiscussionThreadView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadView.prototype.endorseThread = function() {
        return this.model.set('endorsed', this.$el.find(".action-answer.is-checked").length > 0);
      };

      DiscussionThreadView.prototype.submitComment = function(event) {
        var body, comment, url,
          _this = this;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("reply-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("reply-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          votes: {
            up_count: 0
          },
          abuse_flaggers: [],
          endorsed: false,
          user_id: window.user.get("id")
        });
        comment.set('thread', this.model.get('thread'));
        this.renderResponseToList(comment, ".js-response-list");
        this.model.addComment();
        this.renderAddResponseButton();
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(data, textStatus) {
            comment.updateInfo(data.annotated_content_info);
            return comment.set(data.content);
          }
        });
      };

      DiscussionThreadView.prototype.edit = function(event) {
        this.createEditView();
        return this.renderEditView();
      };

      DiscussionThreadView.prototype.update = function(event) {
        var newBody, newTitle, url,
          _this = this;
        newTitle = this.editView.$(".edit-post-title").val();
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_thread', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: newTitle,
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-title").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              title: newTitle,
              body: newBody
            });
            _this.model.unset("abbreviatedBody");
            _this.createShowView();
            return _this.renderShowView();
          }
        });
      };

      DiscussionThreadView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new DiscussionThreadEditView({
          model: this.model
        });
        this.editView.bind("thread:update", this.update);
        return this.editView.bind("thread:cancel_edit", this.cancelEdit);
      };

      DiscussionThreadView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.thread-content-wrapper'));
        view.render();
        return view.delegateEvents();
      };

      DiscussionThreadView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      DiscussionThreadView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new DiscussionThreadShowView({
          model: this.model,
          mode: this.mode
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      DiscussionThreadView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        return this.renderShowView();
      };

      DiscussionThreadView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        url = this.model.urlFor('_delete');
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this post?"))) {
          return;
        }
        this.model.remove();
        this.showView.undelegateEvents();
        this.undelegateEvents();
        this.$el.empty();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      return DiscussionThreadView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {

      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        var _this = this;
        this.render = function() {
          return DiscussionUserProfileView.prototype.render.apply(_this, arguments);
        };
        return DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
      }

      DiscussionUserProfileView.prototype.events = {
        "click .discussion-paginator a": "changePage"
      };

      DiscussionUserProfileView.prototype.initialize = function(options) {
        DiscussionUserProfileView.__super__.initialize.call(this);
        this.page = options.page;
        this.numPages = options.numPages;
        this.discussion = new Discussion();
        this.discussion.on("reset", this.render);
        return this.discussion.reset(this.collection, {
          silent: false
        });
      };

      DiscussionUserProfileView.prototype.render = function() {
        var baseUri, pageUrlFunc, paginationParams, paginationTemplate, profileTemplate;
        profileTemplate = $("script#_user_profile").html();
        this.$el.html(Mustache.render(profileTemplate, {
          threads: this.discussion.models
        }));
        this.discussion.map(function(thread) {
          return new DiscussionThreadProfileView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          }).render();
        });
        baseUri = URI(window.location).removeSearch("page");
        pageUrlFunc = function(page) {
          return baseUri.clone().addSearch("page", page);
        };
        paginationParams = DiscussionUtil.getPaginationParams(this.page, this.numPages, pageUrlFunc);
        paginationTemplate = $("script#_pagination").html();
        return this.$el.find(".pagination").html(Mustache.render(paginationTemplate, paginationParams));
      };

      DiscussionUserProfileView.prototype.changePage = function(event) {
        var url,
          _this = this;
        event.preventDefault();
        url = $(event.target).attr("href");
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          $loading: $(event.target),
          takeFocus: true,
          url: url,
          type: "GET",
          dataType: "json",
          success: function(response, textStatus, xhr) {
            _this.page = response.page;
            _this.numPages = response.num_pages;
            _this.discussion.reset(response.discussion_data, {
              silent: false
            });
            return history.pushState({}, "", url);
          },
          error: function() {
            return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the page you requested. Please try again."));
          }
        });
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostView = (function(_super) {

      __extends(NewPostView, _super);

      function NewPostView() {
        var _this = this;
        this.updateStyles = function() {
          return NewPostView.prototype.updateStyles.apply(_this, arguments);
        };
        this.resetForm = function() {
          return NewPostView.prototype.resetForm.apply(_this, arguments);
        };
        this.hideTopicDropdown = function() {
          return NewPostView.prototype.hideTopicDropdown.apply(_this, arguments);
        };
        return NewPostView.__super__.constructor.apply(this, arguments);
      }

      NewPostView.prototype.initialize = function(options) {
        var _ref;
        this.mode = options.mode || "inline";
        if ((_ref = this.mode) !== "tab" && _ref !== "inline") {
          throw new Error("invalid mode: " + this.mode);
        }
        this.course_settings = options.course_settings;
        this.maxNameWidth = 100;
        return this.topicId = options.topicId;
      };

      NewPostView.prototype.render = function() {
        var context;
        context = _.clone(this.course_settings.attributes);
        _.extend(context, {
          cohort_options: this.getCohortOptions(),
          mode: this.mode,
          form_id: this.mode + (this.topicId ? "-" + this.topicId : "")
        });
        if (this.mode === "tab") {
          context.topics_html = this.renderCategoryMap(this.course_settings.get("category_map"));
        }
        this.$el.html(_.template($("#new-post-template").html(), context));
        if (this.mode === "tab") {
          this.dropdownButton = this.$(".post-topic-button");
          this.topicMenu = this.$(".topic-menu-wrapper");
          this.hideTopicDropdown();
          this.setTopic(this.$("a.topic-title").first());
        }
        return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "js-post-body");
      };

      NewPostView.prototype.renderCategoryMap = function(map) {
        var category_template, entry, entry_template, html, name, _i, _len, _ref;
        category_template = _.template($("#new-post-menu-category-template").html());
        entry_template = _.template($("#new-post-menu-entry-template").html());
        html = "";
        _ref = map.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          if (name in map.entries) {
            entry = map.entries[name];
            html += entry_template({
              text: name,
              id: entry.id,
              is_cohorted: entry.is_cohorted
            });
          } else {
            html += category_template({
              text: name,
              entries: this.renderCategoryMap(map.subcategories[name])
            });
          }
        }
        return html;
      };

      NewPostView.prototype.getCohortOptions = function() {
        var user_cohort_id;
        if (this.course_settings.get("is_cohorted") && DiscussionUtil.isPrivilegedUser()) {
          user_cohort_id = $("#discussion-container").data("user-cohort-id");
          return _.map(this.course_settings.get("cohorts"), function(cohort) {
            return {
              value: cohort.id,
              text: cohort.name,
              selected: cohort.id === user_cohort_id
            };
          });
        } else {
          return null;
        }
      };

      NewPostView.prototype.events = {
        "submit .forum-new-post-form": "createPost",
        "click .post-topic-button": "toggleTopicDropdown",
        "click .topic-menu-wrapper": "handleTopicEvent",
        "click .topic-filter-label": "ignoreClick",
        "keyup .topic-filter-input": DiscussionFilter.filterDrop,
        "change .post-option-input": "postOptionChange",
        "click .cancel": "cancel",
        "reset .forum-new-post-form": "updateStyles"
      };

      NewPostView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostView.prototype.postOptionChange = function(event) {
        var $optionElem, $target;
        $target = $(event.target);
        $optionElem = $target.closest(".post-option");
        if ($target.is(":checked")) {
          return $optionElem.addClass("is-enabled");
        } else {
          return $optionElem.removeClass("is-enabled");
        }
      };

      NewPostView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, thread_type, title, url,
          _this = this;
        event.preventDefault();
        thread_type = this.$(".post-type-input:checked").val();
        title = this.$(".js-post-title").val();
        body = this.$(".js-post-body").find(".wmd-input").val();
        group = this.$(".js-group-select option:selected").attr("value");
        anonymous = false || this.$(".js-anon").is(":checked");
        anonymous_to_peers = false || this.$(".js-anon-peers").is(":checked");
        follow = false || this.$(".js-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            thread_type: thread_type,
            title: title,
            body: body,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow,
            group_id: group
          },
          error: DiscussionUtil.formErrorHandler(this.$(".post-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            _this.$el.hide();
            _this.resetForm();
            return _this.collection.add(thread);
          }
        });
      };

      NewPostView.prototype.toggleTopicDropdown = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.menuOpen) {
          return this.hideTopicDropdown();
        } else {
          return this.showTopicDropdown();
        }
      };

      NewPostView.prototype.showTopicDropdown = function() {
        this.menuOpen = true;
        this.dropdownButton.addClass('dropped');
        this.topicMenu.show();
        $(".form-topic-drop-search-input").focus();
        $("body").bind("click", this.hideTopicDropdown);
        return this.maxNameWidth = this.dropdownButton.width() - 40;
      };

      NewPostView.prototype.hideTopicDropdown = function() {
        this.menuOpen = false;
        this.dropdownButton.removeClass('dropped');
        this.topicMenu.hide();
        return $("body").unbind("click", this.hideTopicDropdown);
      };

      NewPostView.prototype.handleTopicEvent = function(event) {
        event.preventDefault();
        event.stopPropagation();
        return this.setTopic($(event.target));
      };

      NewPostView.prototype.setTopic = function($target) {
        if ($target.data('discussion-id')) {
          this.topicText = $target.html();
          this.topicText = this.getFullTopicName($target);
          this.topicId = $target.data('discussion-id');
          this.setSelectedTopic();
          if ($target.data("cohorted")) {
            $(".js-group-select").prop("disabled", false);
          } else {
            $(".js-group-select").val("");
            $(".js-group-select").prop("disabled", true);
          }
          return this.hideTopicDropdown();
        }
      };

      NewPostView.prototype.setSelectedTopic = function() {
        return this.$(".js-selected-topic").html(this.fitName(this.topicText));
      };

      NewPostView.prototype.getFullTopicName = function(topicElement) {
        var name;
        name = topicElement.html();
        topicElement.parents('.topic-submenu').each(function() {
          return name = $(this).siblings('.topic-title').text() + ' / ' + name;
        });
        return name;
      };

      NewPostView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.dropdownButton.css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      NewPostView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref, _results;
          _ref = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = gettext("…") + " / " + path.join(" / ");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = gettext("…") + " / " + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = gettext("…") + " / " + rawName + " " + gettext("…");
        }
        return name;
      };

      NewPostView.prototype.cancel = function(event) {
        event.preventDefault();
        if (!confirm(gettext("Your post will be discarded."))) {
          return;
        }
        this.trigger('newPost:cancel');
        return this.resetForm();
      };

      NewPostView.prototype.resetForm = function() {
        this.$(".forum-new-post-form")[0].reset();
        DiscussionUtil.clearFormErrors(this.$(".post-errors"));
        this.$(".wmd-preview p").html("");
        if (this.mode === "tab") {
          return this.setTopic(this.$("a.topic-title").first());
        }
      };

      NewPostView.prototype.updateStyles = function() {
        var _this = this;
        return setTimeout((function() {
          return _this.$(".post-option-input").trigger("change");
        }), 1);
      };

      return NewPostView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentEditView = (function(_super) {

      __extends(ResponseCommentEditView, _super);

      function ResponseCommentEditView() {
        return ResponseCommentEditView.__super__.constructor.apply(this, arguments);
      }

      ResponseCommentEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ResponseCommentEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentEditView.prototype.initialize = function() {
        return ResponseCommentEditView.__super__.initialize.call(this);
      };

      ResponseCommentEditView.prototype.render = function() {
        this.template = _.template($("#response-comment-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-comment-body");
        return this;
      };

      ResponseCommentEditView.prototype.update = function(event) {
        return this.trigger("comment:update", event);
      };

      ResponseCommentEditView.prototype.cancel_edit = function(event) {
        return this.trigger("comment:cancel_edit", event);
      };

      return ResponseCommentEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {

      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        var _this = this;
        this.edit = function(event) {
          return ResponseCommentShowView.prototype.edit.apply(_this, arguments);
        };
        this._delete = function(event) {
          return ResponseCommentShowView.prototype._delete.apply(_this, arguments);
        };
        return ResponseCommentShowView.__super__.constructor.apply(this, arguments);
      }

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.render = function() {
        this.template = _.template($("#response-comment-show-template").html());
        this.$el.html(this.template(_.extend({
          cid: this.model.cid,
          author_display: this.getAuthorDisplay()
        }, this.model.attributes)));
        this.delegateEvents();
        this.renderAttrs();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref = this.model.parent.get('username')) != null ? _ref : gettext("anonymous");
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype._delete = function(event) {
        return this.trigger("comment:_delete", event);
      };

      ResponseCommentShowView.prototype.edit = function(event) {
        return this.trigger("comment:edit", event);
      };

      return ResponseCommentShowView;

    })(DiscussionContentShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentView = (function(_super) {

      __extends(ResponseCommentView, _super);

      function ResponseCommentView() {
        var _this = this;
        this.update = function(event) {
          return ResponseCommentView.prototype.update.apply(_this, arguments);
        };
        this.edit = function(event) {
          return ResponseCommentView.prototype.edit.apply(_this, arguments);
        };
        this.cancelEdit = function(event) {
          return ResponseCommentView.prototype.cancelEdit.apply(_this, arguments);
        };
        this._delete = function(event) {
          return ResponseCommentView.prototype._delete.apply(_this, arguments);
        };
        return ResponseCommentView.__super__.constructor.apply(this, arguments);
      }

      ResponseCommentView.prototype.tagName = "li";

      ResponseCommentView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentView.prototype.initialize = function() {
        return ResponseCommentView.__super__.initialize.call(this);
      };

      ResponseCommentView.prototype.render = function() {
        this.renderShowView();
        return this;
      };

      ResponseCommentView.prototype.renderSubView = function(view) {
        view.setElement(this.$el);
        view.render();
        return view.delegateEvents();
      };

      ResponseCommentView.prototype.renderShowView = function() {
        if (this.showView == null) {
          if (this.editView != null) {
            this.editView.undelegateEvents();
            this.editView.$el.empty();
            this.editView = null;
          }
          this.showView = new ResponseCommentShowView({
            model: this.model
          });
          this.showView.bind("comment:_delete", this._delete);
          this.showView.bind("comment:edit", this.edit);
          return this.renderSubView(this.showView);
        }
      };

      ResponseCommentView.prototype.renderEditView = function() {
        if (this.editView == null) {
          if (this.showView != null) {
            this.showView.undelegateEvents();
            this.showView.$el.empty();
            this.showView = null;
          }
          this.editView = new ResponseCommentEditView({
            model: this.model
          });
          this.editView.bind("comment:update", this.update);
          this.editView.bind("comment:cancel_edit", this.cancelEdit);
          return this.renderSubView(this.editView);
        }
      };

      ResponseCommentView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this comment?"))) {
          return;
        }
        url = this.model.urlFor('_delete');
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.remove();
            return _this.$el.remove();
          },
          error: function() {
            return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble deleting this comment. Please try again."));
          }
        });
      };

      ResponseCommentView.prototype.cancelEdit = function(event) {
        this.trigger("comment:cancel_edit", event);
        return this.renderShowView();
      };

      ResponseCommentView.prototype.edit = function(event) {
        this.trigger("comment:edit", event);
        return this.renderEditView();
      };

      ResponseCommentView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-comment-body textarea").val();
        url = DiscussionUtil.urlFor("update_comment", this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: $(event.target),
          url: url,
          type: "POST",
          dataType: "json",
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-comment-form-errors")),
          success: function(response, textStatus) {
            _this.model.set("body", newBody);
            return _this.cancelEdit();
          }
        });
      };

      return ResponseCommentView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseEditView = (function(_super) {

      __extends(ThreadResponseEditView, _super);

      function ThreadResponseEditView() {
        return ThreadResponseEditView.__super__.constructor.apply(this, arguments);
      }

      ThreadResponseEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ThreadResponseEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseEditView.prototype.initialize = function() {
        return ThreadResponseEditView.__super__.initialize.call(this);
      };

      ThreadResponseEditView.prototype.render = function() {
        this.template = _.template($("#thread-response-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      ThreadResponseEditView.prototype.update = function(event) {
        return this.trigger("response:update", event);
      };

      ThreadResponseEditView.prototype.cancel_edit = function(event) {
        return this.trigger("response:cancel_edit", event);
      };

      return ThreadResponseEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseShowView = (function(_super) {

      __extends(ThreadResponseShowView, _super);

      function ThreadResponseShowView() {
        return ThreadResponseShowView.__super__.constructor.apply(this, arguments);
      }

      ThreadResponseShowView.prototype.initialize = function() {
        ThreadResponseShowView.__super__.initialize.call(this);
        return this.listenTo(this.model, "change", this.render);
      };

      ThreadResponseShowView.prototype.renderTemplate = function() {
        var context;
        this.template = _.template($("#thread-response-show-template").html());
        context = _.extend({
          cid: this.model.cid,
          author_display: this.getAuthorDisplay(),
          endorser_display: this.getEndorserDisplay()
        }, this.model.attributes);
        return this.template(context);
      };

      ThreadResponseShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderAttrs();
        this.$el.find(".posted-details .timeago").timeago();
        this.convertMath();
        return this;
      };

      ThreadResponseShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".response-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      ThreadResponseShowView.prototype.edit = function(event) {
        return this.trigger("response:edit", event);
      };

      ThreadResponseShowView.prototype._delete = function(event) {
        return this.trigger("response:_delete", event);
      };

      return ThreadResponseShowView;

    })(DiscussionContentShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseView = (function(_super) {

      __extends(ThreadResponseView, _super);

      function ThreadResponseView() {
        var _this = this;
        this.update = function(event) {
          return ThreadResponseView.prototype.update.apply(_this, arguments);
        };
        this.edit = function(event) {
          return ThreadResponseView.prototype.edit.apply(_this, arguments);
        };
        this.cancelEdit = function(event) {
          return ThreadResponseView.prototype.cancelEdit.apply(_this, arguments);
        };
        this._delete = function(event) {
          return ThreadResponseView.prototype._delete.apply(_this, arguments);
        };
        this.renderComment = function(comment) {
          return ThreadResponseView.prototype.renderComment.apply(_this, arguments);
        };
        return ThreadResponseView.__super__.constructor.apply(this, arguments);
      }

      ThreadResponseView.prototype.tagName = "li";

      ThreadResponseView.prototype.className = "forum-response";

      ThreadResponseView.prototype.events = {
        "click .discussion-submit-comment": "submitComment",
        "focus .wmd-input": "showEditorChrome"
      };

      ThreadResponseView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseView.prototype.initialize = function(options) {
        this.collapseComments = options.collapseComments;
        return this.createShowView();
      };

      ThreadResponseView.prototype.renderTemplate = function() {
        var templateData, _ref;
        this.template = _.template($("#thread-response-template").html());
        templateData = this.model.toJSON();
        templateData.wmdId = (_ref = this.model.id) != null ? _ref : (new Date()).getTime();
        return this.template(templateData);
      };

      ThreadResponseView.prototype.render = function() {
        this.$el.addClass("response_" + this.model.get("id"));
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.renderComments();
        return this;
      };

      ThreadResponseView.prototype.afterInsert = function() {
        this.makeWmdEditor("comment-body");
        return this.hideEditorChrome();
      };

      ThreadResponseView.prototype.hideEditorChrome = function() {
        this.$('.wmd-button-row').hide();
        this.$('.wmd-preview-container').hide();
        this.$('.wmd-input').css({
          height: '35px',
          padding: '5px'
        });
        return this.$('.comment-post-control').hide();
      };

      ThreadResponseView.prototype.showEditorChrome = function() {
        this.$('.wmd-button-row').show();
        this.$('.wmd-preview-container').show();
        this.$('.comment-post-control').show();
        return this.$('.wmd-input').css({
          height: '125px',
          padding: '10px'
        });
      };

      ThreadResponseView.prototype.renderComments = function() {
        var collectComments, comments,
          _this = this;
        comments = new Comments();
        this.commentViews = [];
        comments.comparator = function(comment) {
          return comment.get('created_at');
        };
        collectComments = function(comment) {
          var children;
          comments.add(comment);
          children = new Comments(comment.get('children'));
          return children.each(function(child) {
            child.parent = comment;
            return collectComments(child);
          });
        };
        this.model.get('comments').each(collectComments);
        comments.each(function(comment) {
          return _this.renderComment(comment, false, null);
        });
        if (this.collapseComments && comments.length) {
          this.$(".comments").hide();
          return this.$(".action-show-comments").on("click", function(event) {
            event.preventDefault();
            _this.$(".action-show-comments").hide();
            return _this.$(".comments").show();
          });
        } else {
          return this.$(".action-show-comments").hide();
        }
      };

      ThreadResponseView.prototype.renderComment = function(comment) {
        var view,
          _this = this;
        comment.set('thread', this.model.get('thread'));
        view = new ResponseCommentView({
          model: comment
        });
        view.render();
        this.$el.find(".comments .new-comment").before(view.el);
        view.bind("comment:edit", function(event) {
          if (_this.editView != null) {
            _this.cancelEdit(event);
          }
          _this.cancelCommentEdits();
          return _this.hideCommentForm();
        });
        view.bind("comment:cancel_edit", function() {
          return _this.showCommentForm();
        });
        this.commentViews.push(view);
        return view;
      };

      ThreadResponseView.prototype.submitComment = function(event) {
        var body, comment, url, view;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("comment-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("comment-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          abuse_flaggers: [],
          user_id: window.user.get("id"),
          id: "unsaved"
        });
        view = this.renderComment(comment);
        this.hideEditorChrome();
        this.trigger("comment:add", comment);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(response, textStatus) {
            comment.set(response.content);
            comment.updateInfo(response.annotated_content_info);
            return view.render();
          }
        });
      };

      ThreadResponseView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this response?"))) {
          return;
        }
        url = this.model.urlFor('_delete');
        this.model.remove();
        this.$el.remove();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      ThreadResponseView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new ThreadResponseEditView({
          model: this.model
        });
        this.editView.bind("response:update", this.update);
        return this.editView.bind("response:cancel_edit", this.cancelEdit);
      };

      ThreadResponseView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.discussion-response'));
        view.render();
        return view.delegateEvents();
      };

      ThreadResponseView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      ThreadResponseView.prototype.cancelCommentEdits = function() {
        return _.each(this.commentViews, function(view) {
          return view.cancelEdit();
        });
      };

      ThreadResponseView.prototype.hideCommentForm = function() {
        return this.$('.comment-form').closest('li').hide();
      };

      ThreadResponseView.prototype.showCommentForm = function() {
        return this.$('.comment-form').closest('li').show();
      };

      ThreadResponseView.prototype.createShowView = function() {
        var _this = this;
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new ThreadResponseShowView({
          model: this.model
        });
        this.showView.bind("response:_delete", this._delete);
        this.showView.bind("response:edit", this.edit);
        return this.showView.on("comment:endorse", function() {
          return _this.trigger("comment:endorse");
        });
      };

      ThreadResponseView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      ThreadResponseView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        this.renderShowView();
        return this.showCommentForm();
      };

      ThreadResponseView.prototype.edit = function(event) {
        this.createEditView();
        this.renderEditView();
        this.cancelCommentEdits();
        return this.hideCommentForm();
      };

      ThreadResponseView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_comment', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              body: newBody
            });
            _this.createShowView();
            _this.renderShowView();
            return _this.showCommentForm();
          }
        });
      };

      return ThreadResponseView;

    })(DiscussionContentView);
  }

}).call(this);
